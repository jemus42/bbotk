% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OptimizerLocalSearch.R
\name{mlr_optimizers_local_search}
\alias{mlr_optimizers_local_search}
\alias{OptimizerLocalSearch}
\title{Optimization via Local Search}
\description{
\code{OptimizerLocalSearch} class that implements a simple Local Search.  Local Search starts by
determining the \code{mu} initial points present in the \link{Archive} of the \link{OptimInstance}.  If fewer
points than \code{mu} are present, additional points sampled uniformly at random are evaluated.

In each iteration, for each of the \code{mu} initial points, \code{n_points} neighbors are generated by
local mutation.  Local mutation samples a single parameter that is to be mutated and then
proceeds as follows: Numeric parameters (\link[paradox:ParamDbl]{paradox::ParamDbl}) are mutated via Gaussian mutation
(using \code{sigma} scaled by the range of the parameter as a standard deviation).

Integer parameters (\link[paradox:ParamInt]{paradox::ParamInt}) undergo the same mutation but are rounded to the closest
integer after mutation.  Categorical parameters (\link[paradox:ParamFct]{paradox::ParamFct} and \link[paradox:ParamLgl]{paradox::ParamLgl}) are
mutated via uniform mutation.  Note that parameters that are conditioned on (i.e., they are
parents of a \link[paradox:Condition]{paradox::Condition}, see the dependencies of the search space) are not mutated.
}
\section{Dictionary}{

This \link{Optimizer} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary}
\link{mlr_optimizers} or with the associated sugar function \code{\link[=opt]{opt()}}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{mlr_optimizers$get("local_search")
opt("local_search")
}\if{html}{\out{</div>}}
}

\section{Parameters}{

\describe{
\item{\code{mu}}{\code{integer(1)}\cr
Size of the initial points which are used as a starting point for the Local Search.
Default is \code{10}.
}
\item{\code{n_points}}{\code{integer(1)}\cr
Number of neighboring points to generate for each of the \code{mu} initial points in each iteration.
Default is \code{100}.
}
\item{\code{sigma}}{\code{numeric(1)}\cr
Standard deviation used for mutation of numeric parameters.
Number of neighboring points to generate for each of the \code{mu} initial points in each iteration.
Default is \code{0.05}.
}
}
}

\section{Progress Bars}{

\verb{$optimize()} supports progress bars via the package \CRANpkg{progressr}
combined with a \link{Terminator}. Simply wrap the function in
\code{progressr::with_progress()} to enable them. We recommend to use package
\CRANpkg{progress} as backend; enable with \code{progressr::handlers("progress")}.
}

\examples{
search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))

codomain = ps(y = p_dbl(tags = "minimize"))

objective_function = function(xs) {
  list(y = as.numeric(xs)^2)
}

objective = ObjectiveRFun$new(
 fun = objective_function,
 domain = domain,
 codomain = codomain)

instance = OptimInstanceSingleCrit$new(
 objective = objective,
 search_space = search_space,
 terminator = trm("evals", n_evals = 10))


optimizer = opt("local_search")

# modifies the instance by reference
optimizer$optimize(instance)

# returns best scoring evaluation
instance$result

# allows access of data.table of full path of all evaluations
as.data.table(instance$archive$data)
}
\section{Super class}{
\code{\link[bbotk:Optimizer]{bbotk::Optimizer}} -> \code{OptimizerLocalSearch}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-OptimizerLocalSearch-new}{\code{OptimizerLocalSearch$new()}}
\item \href{#method-OptimizerLocalSearch-clone}{\code{OptimizerLocalSearch$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="format"><a href='../../bbotk/html/Optimizer.html#method-Optimizer-format'><code>bbotk::Optimizer$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="help"><a href='../../bbotk/html/Optimizer.html#method-Optimizer-help'><code>bbotk::Optimizer$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="optimize"><a href='../../bbotk/html/Optimizer.html#method-Optimizer-optimize'><code>bbotk::Optimizer$optimize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="bbotk" data-topic="Optimizer" data-id="print"><a href='../../bbotk/html/Optimizer.html#method-Optimizer-print'><code>bbotk::Optimizer$print()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OptimizerLocalSearch-new"></a>}}
\if{latex}{\out{\hypertarget{method-OptimizerLocalSearch-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerLocalSearch$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OptimizerLocalSearch-clone"></a>}}
\if{latex}{\out{\hypertarget{method-OptimizerLocalSearch-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OptimizerLocalSearch$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
