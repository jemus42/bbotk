[{"path":"https://bbotk.mlr-org.com/articles/bbotk.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"bbotk: A brief introduction","text":"main goal black box optimization toolkit (bbotk) provide common framework optimization packages. Therefore bbotk includes following R6 classes can used variety optimization scenarios. Optimizer: Objects class allow optimize object class OptimInstance. OptimInstance: Defines optimization problem, consisting Objective, search_space Terminator. evaluations OptimInstance automatically stored Archive. Objective: Objects class contain objective function. class ensures objective function called right way defines, whether function minimized maximized. Terminator: Objects class control termination optimization independent optimizer. bbotk also includes basic optimizers can used . registered optimizers can queried follows: Vignette show use bbotk-classes solve simple optimization problem. Furthermore, learn construct Objective. define optimization problem OptimInstance define restricted search_space. define logging threshold. access Archive evaluated function calls.","code":"library(bbotk) #> Loading required package: paradox opts() #> <DictionaryOptimizer> with 8 stored values #> Keys: cmaes, design_points, focus_search, gensa, grid_search, irace, #>   nloptr, random_search"},{"path":"https://bbotk.mlr-org.com/articles/bbotk.html","id":"use-bbotk-to-optimize-a-function","dir":"Articles","previous_headings":"Overview","what":"Use bbotk to optimize a function","title":"bbotk: A brief introduction","text":"following use bbotk minimize function: First need wrap fun inside Objective object. functions expect list input can use ObjectiveRFun class. Additionally, need specify domain, .e. space x-values function accepts input. Optionally, can define co-domain, .e. output space objective function. necessary want deviate default define output named y minimized. spaces defined using package paradox. next step decide optimization stop. can list available terminators follows: termination stop, takes longer 10 seconds 20 evaluations reached. correct default secs=30 setting values param_set terminator. created Terminator objects criteria. combine use combo Terminator. finally start optimization, create OptimInstance contains also Objective Terminator. Note, OptimInstance(SingleCrit/MultiCrit)$new() also optional search_space argument. can used search_space subset obfun$domain want apply transformations. later. Finally, define Optimizer. seen , can call opts() list available optimizers. opt evolutionary optimizer, GenSA package. start optimization call Optimizer OptimInstance. Note, specify termination inside optimizer. bbotk generally sets termination optimizers never terminate instead breaks code internally soon termination criterion fulfilled. results can queried OptimInstance. can also access whole history evaluated points.","code":"fun = function(xs) {   c(y = - (xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10) } library(paradox)  domain = ps(   x1 = p_dbl(-10, 10),   x2 = p_dbl(-5, 5) ) codomain = ps(   y = p_dbl(tags = \"maximize\") ) obfun = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = codomain,   properties = \"deterministic\" # i.e. the result always returns the same result for the same input. ) trms() #> <DictionaryTerminator> with 8 stored values #> Keys: clock_time, combo, evals, none, perf_reached, run_time, #>   stagnation, stagnation_batch terminators = list(   evals = trm(\"evals\", n_evals = 20),   run_time = trm(\"run_time\") ) terminators #> $evals #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=20, k=0 #>  #> $run_time #> <TerminatorRunTime>: Run Time #> * Parameters: secs=30 terminators$run_time$param_set$values$secs = 10 term_combo = TerminatorCombo$new(terminators = terminators) instance = OptimInstanceSingleCrit$new(objective = obfun, terminator = term_combo) instance #> <OptimInstanceSingleCrit> #> * State:  Not optimized #> * Objective: <ObjectiveRFun:function> #> * Search Space: #>    id    class lower upper nlevels #> 1: x1 ParamDbl   -10    10     Inf #> 2: x2 ParamDbl    -5     5     Inf #> * Terminator: <TerminatorCombo> optimizer = opt(\"gensa\") optimizer #> <OptimizerGenSA>: Generalized Simulated Annealing #> * Parameters: list() #> * Parameter classes: ParamDbl #> * Properties: single-crit #> * Packages: bbotk, GenSA optimizer$optimize(instance) #>    x1 x2  x_domain  y #> 1:  2 -3 <list[2]> 10 # result as a data.table instance$result #>    x1 x2  x_domain  y #> 1:  2 -3 <list[2]> 10 # result as a list that can be passed to the Objective instance$result_x_domain #> $x1 #> [1] 2 #>  #> $x2 #> [1] -3 # result outcome instance$result_y #>  y  #> 10 as.data.table(instance$archive) #>            x1        x2          y           timestamp batch_nr x_domain_x1 #>  1: -4.689827 -1.278761 -37.716445 2022-07-19 04:42:29        1   -4.689827 #>  2: -5.930364 -4.400474 -54.851999 2022-07-19 04:42:29        2   -5.930364 #>  3:  7.170817 -1.519948 -18.927907 2022-07-19 04:42:29        3    7.170817 #>  4:  2.045200 -1.519948   7.807403 2022-07-19 04:42:29        4    2.045200 #>  5:  2.045200 -2.064742   9.123250 2022-07-19 04:42:29        5    2.045200 #>  6:  2.045200 -2.064742   9.123250 2022-07-19 04:42:29        6    2.045200 #>  7:  2.045201 -2.064742   9.123250 2022-07-19 04:42:29        7    2.045201 #>  8:  2.045199 -2.064742   9.123250 2022-07-19 04:42:29        8    2.045199 #>  9:  2.045200 -2.064741   9.123248 2022-07-19 04:42:29        9    2.045200 #> 10:  2.045200 -2.064743   9.123252 2022-07-19 04:42:29       10    2.045200 #> 11:  1.954800 -3.935258   9.123250 2022-07-19 04:42:29       11    1.954800 #> 12:  1.954801 -3.935258   9.123250 2022-07-19 04:42:29       12    1.954801 #> 13:  1.954799 -3.935258   9.123250 2022-07-19 04:42:29       13    1.954799 #> 14:  1.954800 -3.935257   9.123252 2022-07-19 04:42:29       14    1.954800 #> 15:  1.954800 -3.935259   9.123248 2022-07-19 04:42:29       15    1.954800 #> 16:  2.000000 -3.000000  10.000000 2022-07-19 04:42:29       16    2.000000 #> 17:  2.000001 -3.000000  10.000000 2022-07-19 04:42:29       17    2.000001 #> 18:  1.999999 -3.000000  10.000000 2022-07-19 04:42:29       18    1.999999 #> 19:  2.000000 -2.999999  10.000000 2022-07-19 04:42:29       19    2.000000 #> 20:  2.000000 -3.000001  10.000000 2022-07-19 04:42:29       20    2.000000 #>     x_domain_x2 #>  1:   -1.278761 #>  2:   -4.400474 #>  3:   -1.519948 #>  4:   -1.519948 #>  5:   -2.064742 #>  6:   -2.064742 #>  7:   -2.064742 #>  8:   -2.064742 #>  9:   -2.064741 #> 10:   -2.064743 #> 11:   -3.935258 #> 12:   -3.935258 #> 13:   -3.935258 #> 14:   -3.935257 #> 15:   -3.935259 #> 16:   -3.000000 #> 17:   -3.000000 #> 18:   -3.000000 #> 19:   -2.999999 #> 20:   -3.000001"},{"path":"https://bbotk.mlr-org.com/articles/bbotk.html","id":"search-space-transformations","dir":"Articles","previous_headings":"Overview > Use bbotk to optimize a function","what":"Search Space Transformations","title":"bbotk: A brief introduction","text":"domain Objective complex, often necessary define simpler search space can handled Optimizer define transformation transforms value suggested optimizer value domain Objective. Reasons transformations can : objective sensitive changes small values changes bigger values certain parameter. E.g. suspect parameter x3 change 0.1 0.2 similar effect change 100 200. Certain restrictions known, .e. sum three parameters supposed 1. many … following look example 2.) want construct box maximal volume, restriction h+w+d = 1. simplicity define problem minimization problem. notice, optimization problem three parameters due restriction degree freedom 2. Therefore need optimize two parameters calculate h, w, d accordingly. Instead domain Objective now use constructed search_space includes trafo OptimInstance. optimizer saw search space optimization returns following result: Internally, OptimInstance transformed values domain result Objective looks follows:","code":"fun_volume = function(xs) {   c(y = - (xs$h * xs$w * xs$d)) } domain = ps(   h = p_dbl(lower = 0),   w = p_dbl(lower = 0),   d = p_dbl(lower = 0) ) obj = ObjectiveRFun$new(   fun = fun_volume,   domain = domain ) search_space = ps(   h = p_dbl(lower = 0, upper = 1),   w = p_dbl(lower = 0, upper = 1),   .extra_trafo = function(x, param_set){     x = unlist(x)     x[\"d\"] = 2 - sum(x) # model d in dependence of h, w     x = x/sum(x) # ensure that h+w+d = 1     as.list(x)   } ) inst = OptimInstanceSingleCrit$new(   objective = obj,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 30) ) optimizer = opt(\"gensa\") lg = lgr::get_logger(\"bbotk\")$set_threshold(\"warn\") # turn off console output optimizer$optimize(inst) #>            h         w  x_domain          y #> 1: 0.6647984 0.6671394 <list[3]> -0.0370368 lg = lgr::get_logger(\"bbotk\")$set_threshold(\"info\") # turn on console output inst$result_x_search_space #>            h         w #> 1: 0.6647984 0.6671394 inst$result_x_domain #> $h #> [1] 0.3323992 #>  #> $w #> [1] 0.3335697 #>  #> $d #> [1] 0.3340311 obj$eval(inst$result_x_domain) #>          y  #> -0.0370368"},{"path":"https://bbotk.mlr-org.com/articles/bbotk.html","id":"notes-on-the-optimization-archive","dir":"Articles","previous_headings":"Overview > Use bbotk to optimize a function","what":"Notes on the optimization archive","title":"bbotk: A brief introduction","text":"following just meant advanced readers. want evaluate function outside optimization result stored Archive can resetting termination call $eval_batch(). However, update result. set result calling inst$assign_result() handled optimizer. Another way get best point following: Note, method just looks best outcome returns according row archive. stochastic optimization problems overly optimistic leads biased results. reason optimizer can use advanced methods determine result set .","code":"library(data.table)  inst$terminator = trm(\"none\") xvals = data.table(h = c(0.6666, 0.6667), w = c(0.6666, 0.6667)) inst$eval_batch(xdt = xvals) #> INFO  [04:42:30.773] [bbotk] Evaluating 2 configuration(s)  #> INFO  [04:42:30.825] [bbotk] Result of batch 31:  #> INFO  [04:42:30.837] [bbotk]       h      w           y  #> INFO  [04:42:30.837] [bbotk]  0.6666 0.6666 -0.03703704  #> INFO  [04:42:30.837] [bbotk]  0.6667 0.6667 -0.03703704 tail(as.data.table(instance$archive)) #>          x1        x2         y           timestamp batch_nr x_domain_x1 #> 1: 1.954800 -3.935259  9.123248 2022-07-19 04:42:29       15    1.954800 #> 2: 2.000000 -3.000000 10.000000 2022-07-19 04:42:29       16    2.000000 #> 3: 2.000001 -3.000000 10.000000 2022-07-19 04:42:29       17    2.000001 #> 4: 1.999999 -3.000000 10.000000 2022-07-19 04:42:29       18    1.999999 #> 5: 2.000000 -2.999999 10.000000 2022-07-19 04:42:29       19    2.000000 #> 6: 2.000000 -3.000001 10.000000 2022-07-19 04:42:29       20    2.000000 #>    x_domain_x2 #> 1:   -3.935259 #> 2:   -3.000000 #> 3:   -3.000000 #> 4:   -3.000000 #> 5:   -2.999999 #> 6:   -3.000001 inst$archive$best() #>         h      w           y  x_domain           timestamp batch_nr #> 1: 0.6667 0.6667 -0.03703704 <list[3]> 2022-07-19 04:42:30       31"},{"path":"https://bbotk.mlr-org.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Maintainer, author. Jakob Richter. Author. Michel Lang. Author. Bernd Bischl. Author. Martin Binder. Author. Olaf Mersmann. Contributor.","code":""},{"path":"https://bbotk.mlr-org.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Richter J, Lang M, Bischl B, Binder M (2022). bbotk: Black-Box Optimization Toolkit. https://bbotk.mlr-org.com, https://github.com/mlr-org/bbotk.","code":"@Manual{,   title = {bbotk: Black-Box Optimization Toolkit},   author = {Marc Becker and Jakob Richter and Michel Lang and Bernd Bischl and Martin Binder},   year = {2022},   note = {https://bbotk.mlr-org.com, https://github.com/mlr-org/bbotk}, }"},{"path":"https://bbotk.mlr-org.com/index.html","id":"bbotk---black-box-optimization-toolkit","dir":"","previous_headings":"","what":"Black-Box Optimization Toolkit","title":"Black-Box Optimization Toolkit","text":"Package website: release | dev package provides common framework optimization including Optimizer: Objects class allow optimize object class OptimInstance. OptimInstance: Defines optimization problem, consisting Objective, search_space Terminator. evaluations OptimInstance automatically stored Archive. Objective: Objects class contain objective function. class ensures objective function called right way defines, whether function minimized maximized. Terminator: Objects class control termination optimization independent optimizer. Various optimization methods already implemented e.g. grid search, random search generalized simulated annealing.","code":""},{"path":"https://bbotk.mlr-org.com/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Black-Box Optimization Toolkit","text":"Package vignette","code":""},{"path":"https://bbotk.mlr-org.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Black-Box Optimization Toolkit","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"bbotk\") remotes::install_github(\"mlr-org/bbotk\")"},{"path":[]},{"path":"https://bbotk.mlr-org.com/index.html","id":"optimization","dir":"","previous_headings":"Examples","what":"Optimization","title":"Black-Box Optimization Toolkit","text":"","code":"# define objective function fun = function(xs) {   c(y = - (xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10) }  # set domain domain = ps(   x1 = p_dbl(-10, 10),   x2 = p_dbl(-5, 5) )  # set codomain codomain = ps(   y = p_dbl(tags = \"maximize\") )  # create Objective object objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = codomain,   properties = \"deterministic\" )  # Define termination criterion terminator = trm(\"evals\", n_evals = 10)  # create optimization instance instance = OptimInstanceSingleCrit$new(   objective = objective,   terminator = terminator )  # load optimizer optimizer = opt(\"gensa\")  # trigger optimization optimizer$optimize(instance) ##        x1        x2  x_domain        y ## 1: 2.0452 -2.064743 <list[2]> 9.123252 # best performing configuration instance$result ##        x1        x2  x_domain        y ## 1: 2.0452 -2.064743 <list[2]> 9.123252 # all evaluated configuration as.data.table(instance$archive) ##            x1        x2          y           timestamp batch_nr x_domain_x1 x_domain_x2 ##  1: -4.689827 -1.278761 -37.716445 2021-10-10 18:03:01        1   -4.689827   -1.278761 ##  2: -5.930364 -4.400474 -54.851999 2021-10-10 18:03:01        2   -5.930364   -4.400474 ##  3:  7.170817 -1.519948 -18.927907 2021-10-10 18:03:01        3    7.170817   -1.519948 ##  4:  2.045200 -1.519948   7.807403 2021-10-10 18:03:01        4    2.045200   -1.519948 ##  5:  2.045200 -2.064742   9.123250 2021-10-10 18:03:01        5    2.045200   -2.064742 ##  6:  2.045200 -2.064742   9.123250 2021-10-10 18:03:01        6    2.045200   -2.064742 ##  7:  2.045201 -2.064742   9.123250 2021-10-10 18:03:01        7    2.045201   -2.064742 ##  8:  2.045199 -2.064742   9.123250 2021-10-10 18:03:01        8    2.045199   -2.064742 ##  9:  2.045200 -2.064741   9.123248 2021-10-10 18:03:01        9    2.045200   -2.064741 ## 10:  2.045200 -2.064743   9.123252 2021-10-10 18:03:01       10    2.045200   -2.064743"},{"path":"https://bbotk.mlr-org.com/index.html","id":"quick-optimization-with-bb_optimize","dir":"","previous_headings":"Examples","what":"Quick optimization with bb_optimize","title":"Black-Box Optimization Toolkit","text":"","code":"library(bbotk)  # define objective function fun = function(xs) {   c(y = - (xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10) }  # optimize function with random search result = bb_optimize(fun, method = \"random_search\", lower = c(-10, -5), upper = c(10, 5),   max_evals = 100)  # optimized parameters result$par ##           x1       x2 ## 1: -7.982537 4.273021 # optimal outcome result$value ##        y1  ## -142.5479"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging object for objective function evaluations — Archive","title":"Logging object for objective function evaluations — Archive","text":"Container around data.table::data.table stores performed function calls Objective.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 Methods","title":"Logging object for objective function evaluations — Archive","text":".data.table(archive) Archive -> data.table::data.table() Returns tabular view performed function calls Objective. x_domain column unnested separate columns.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Logging object for objective function evaluations — Archive","text":"search_space (paradox::ParamSet) Search space objective. codomain (Codomain) Codomain objective function. start_time (POSIXct) Time stamp optimization started. time set Optimizer. check_values (logical(1)) Determines points results checked validity. data (data.table::data.table) Contains performed Objective function calls.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Logging object for objective function evaluations — Archive","text":"n_evals (integer(1)) Number evaluations stored archive. n_batch (integer(1)) Number batches stored archive. cols_x (character()) Column names search space parameters. cols_y (character()) Column names codomain target parameters.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logging object for objective function evaluations — Archive","text":"Archive$new() Archive$add_evals() Archive$best() Archive$nds_selection() Archive$format() Archive$print() Archive$clear() Archive$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logging object for objective function evaluations — Archive","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$new(search_space, codomain, check_values = TRUE)"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. check_values (logical(1)) x-values added archive checked validity? Search space logged archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-add-evals-","dir":"Reference","previous_headings":"","what":"Method add_evals()","title":"Logging object for objective function evaluations — Archive","text":"Adds function evaluations archive table.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$add_evals(xdt, xss_trafoed = NULL, ydt)"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns. xss_trafoed (list()) Transformed point(s) domain space. ydt (data.table::data.table()) Optimal outcome.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-best-","dir":"Reference","previous_headings":"","what":"Method best()","title":"Logging object for objective function evaluations — Archive","text":"Returns best scoring evaluation(s). single-crit optimization, solution minimizes / maximizes objective function. multi-crit optimization, Pareto set / front.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$best(batch = NULL, n_select = 1)"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"batch (integer()) batch number(s) limit best results . Default batches. n_select (integer(1L)) Amount points select. Ignored multi-crit optimization.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Logging object for objective function evaluations — Archive","text":"data.table::data.table()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-nds-selection-","dir":"Reference","previous_headings":"","what":"Method nds_selection()","title":"Logging object for objective function evaluations — Archive","text":"Calculate best points w.r.t. non dominated sorting hypervolume contribution.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$nds_selection(batch = NULL, n_select = 1, ref_point = NULL)"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"batch (integer()) batch number(s) limit best points . Default batches. n_select (integer(1L)) Amount points select. ref_point (numeric()) Reference point hypervolume.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Logging object for objective function evaluations — Archive","text":"data.table::data.table()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Logging object for objective function evaluations — Archive","text":"Helper print outputs.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$format()"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Logging object for objective function evaluations — Archive","text":"Printer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$print()"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"... (ignored).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"Logging object for objective function evaluations — Archive","text":"Clear evaluation results archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$clear()"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logging object for objective function evaluations — Archive","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging object for objective function evaluations — Archive","text":"","code":"Archive$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Archive.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging object for objective function evaluations — Archive","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal logging object for objective function evaluations — ArchiveBest","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"ArchiveBest stores data records best scoring evaluation passed $add_evals(). Archive API fully implemented many parameters ignored methods nothing. archive still works TerminatorClockTime, TerminatorEvals, TerminatorNone TerminatorEvals.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"bbotk::Archive -> ArchiveBest","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"n_evals (integer(1)) Number evaluations stored archive. n_batch (integer(1)) Number batches stored archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"bbotk::Archive$clear() bbotk::Archive$format() bbotk::Archive$nds_selection() bbotk::Archive$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"ArchiveBest$new() ArchiveBest$add_evals() ArchiveBest$best() ArchiveBest$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"","code":"ArchiveBest$new(search_space, codomain, check_values = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. check_values (logical(1)) ignored.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"method-add-evals-","dir":"Reference","previous_headings":"","what":"Method add_evals()","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"Stores best result ydt.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"","code":"ArchiveBest$add_evals(xdt, xss_trafoed = NULL, ydt)"},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns. xss_trafoed (list()) Transformed point(s) domain space. ydt (data.table::data.table()) Optimal outcome.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"method-best-","dir":"Reference","previous_headings":"","what":"Method best()","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"Returns best scoring evaluation. single-crit optimization, solution minimizes / maximizes objective function. multi-crit optimization, Pareto set / front.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"","code":"ArchiveBest$best(m = NULL)"},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"m (integer()) ignored.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"data.table::data.table()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"","code":"ArchiveBest$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/ArchiveBest.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal logging object for objective function evaluations — ArchiveBest","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":null,"dir":"Reference","previous_headings":"","what":"Codomain of Function — Codomain","title":"Codomain of Function — Codomain","text":"set Param objects defining codomain function. parameter set must contain least one target parameter tagged \"minimize\" \"maximize\". codomain may contain extra parameters ignored calling Archive methods $best(), $nds_selection() $cols_y. class usually constructed internally paradox::ParamSet Objective initialized.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Codomain of Function — Codomain","text":"paradox::ParamSet -> Codomain","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Codomain of Function — Codomain","text":"is_target (named logical()) Position TRUE target Params. target_length (integer()) Returns number target Params. target_ids (character()) Number contained target Params. target_tags (named list() character()) Tags target Params. maximization_to_minimization (integer()) Returns numeric vector values -1 1. Multiply outcome maximization problem turn minimization problem.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Codomain of Function — Codomain","text":"paradox::ParamSet$add() paradox::ParamSet$add_dep() paradox::ParamSet$assert() paradox::ParamSet$assert_dt() paradox::ParamSet$check() paradox::ParamSet$check_dt() paradox::ParamSet$format() paradox::ParamSet$get_values() paradox::ParamSet$ids() paradox::ParamSet$print() paradox::ParamSet$search_space() paradox::ParamSet$subset() paradox::ParamSet$test() paradox::ParamSet$test_dt()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Codomain of Function — Codomain","text":"Codomain$new() Codomain$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Codomain of Function — Codomain","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codomain of Function — Codomain","text":"","code":"Codomain$new(params = named_list())"},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codomain of Function — Codomain","text":"params (list()) List Param, named respective ID. Parameters cloned.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Codomain of Function — Codomain","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Codomain of Function — Codomain","text":"","code":"Codomain$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codomain of Function — Codomain","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Codomain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codomain of Function — Codomain","text":"","code":"# define objective function fun = function(xs) {   c(y = -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10) }  # set domain domain = ps(   x1 = p_dbl(-10, 10),   x2 = p_dbl(-5, 5) )  # set codomain codomain = ps(   y = p_dbl(tags = \"maximize\"),   time = p_dbl() )  # create Objective object objective = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = codomain,   properties = \"deterministic\" )"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective function with domain and co-domain — Objective","title":"Objective function with domain and co-domain — Objective","text":"Describes black-box objective function maps arbitrary domain numerical codomain.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"Objective function with domain and co-domain — Objective","text":"Objective objects can following properties: \"noisy\", \"deterministic\", \"single-crit\" \"multi-crit\".","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Objective function with domain and co-domain — Objective","text":"id (character(1))). properties (character()). domain (paradox::ParamSet) Specifies domain function, hence input parameters, types ranges. codomain (paradox::ParamSet) Specifies codomain function, hence feasible values. constants (paradox::ParamSet). Changeable constants parameters subject tuning can stored accessed . Set constant values passed $.eval() $.eval_many() named arguments. check_values (logical(1))","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Objective function with domain and co-domain — Objective","text":"xdim (integer(1)) Dimension domain. ydim (integer(1)) Dimension codomain.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Objective function with domain and co-domain — Objective","text":"Objective$new() Objective$format() Objective$print() Objective$eval() Objective$eval_many() Objective$eval_dt() Objective$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Objective function with domain and co-domain — Objective","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$new(   id = \"f\",   properties = character(),   domain,   codomain = ps(y = p_dbl(tags = \"minimize\")),   constants = ps(),   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function with domain and co-domain — Objective","text":"id (character(1)). properties (character()). domain (paradox::ParamSet) Specifies domain function. paradox::ParamSet describe possible input parameters objective function. includes id, types possible range. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. constants (paradox::ParamSet) Changeable constants parameters subject tuning can stored accessed . check_values (logical(1)) points evaluation results checked validity?","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Objective function with domain and co-domain — Objective","text":"Helper print outputs.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$format()"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function with domain and co-domain — Objective","text":"character().","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Objective function with domain and co-domain — Objective","text":"Print method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$print()"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function with domain and co-domain — Objective","text":"character().","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Objective function with domain and co-domain — Objective","text":"Evaluates single input value objective function. check_values = TRUE, validity point well validity result checked.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$eval(xs)"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function with domain and co-domain — Objective","text":"xs (list()) list contains single x value, e.g. list(x1 = 1, x2 = 2).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function with domain and co-domain — Objective","text":"list() contains result evaluation, e.g. list(y = 1). list can also contain additional named entries stored archive called OptimInstance. extra entries referred extras.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-eval-many-","dir":"Reference","previous_headings":"","what":"Method eval_many()","title":"Objective function with domain and co-domain — Objective","text":"Evaluates multiple input values objective function. check_values = TRUE, validity points well validity results checked. bbotk take care parallelization. function make use parallel computing, implemented deriving class overwriting function.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$eval_many(xss)"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function with domain and co-domain — Objective","text":"xss (list()) list lists contains multiple x values, e.g. list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function with domain and co-domain — Objective","text":"data.table::data.table()] contains one y-column single-criteria functions multiple y-columns multi-criteria functions, e.g.  data.table(y = 1:2) data.table(y1 = 1:2, y2 = 3:4). may also contain additional columns stored archive called OptimInstance. extra columns referred extras.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-eval-dt-","dir":"Reference","previous_headings":"","what":"Method eval_dt()","title":"Objective function with domain and co-domain — Objective","text":"Evaluates multiple input values objective function","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$eval_dt(xdt)"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function with domain and co-domain — Objective","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function with domain and co-domain — Objective","text":"data.table::data.table()] contains one y-column single-criteria functions multiple y-columns multi-criteria functions, e.g.  data.table(y = 1:2) data.table(y1 = 1:2, y2 = 3:4).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Objective function with domain and co-domain — Objective","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function with domain and co-domain — Objective","text":"","code":"Objective$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Objective.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function with domain and co-domain — Objective","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective interface with custom R function — ObjectiveRFun","title":"Objective interface with custom R function — ObjectiveRFun","text":"Objective interface user can pass custom R function expects list input. return function unnamed, named ids codomain.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Objective interface with custom R function — ObjectiveRFun","text":"bbotk::Objective -> ObjectiveRFun","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Objective interface with custom R function — ObjectiveRFun","text":"fun (function) Objective function.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Objective interface with custom R function — ObjectiveRFun","text":"bbotk::Objective$eval_dt() bbotk::Objective$eval_many() bbotk::Objective$format() bbotk::Objective$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Objective interface with custom R function — ObjectiveRFun","text":"ObjectiveRFun$new() ObjectiveRFun$eval() ObjectiveRFun$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Objective interface with custom R function — ObjectiveRFun","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface with custom R function — ObjectiveRFun","text":"","code":"ObjectiveRFun$new(   fun,   domain,   codomain = NULL,   id = \"function\",   properties = character(),   constants = ps(),   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface with custom R function — ObjectiveRFun","text":"fun (function) R function encodes objective expects list input single point (e.g. list(x1 = 1, x2 = 2)) returns result either numeric vector list (e.g. list(y = 3)). domain (paradox::ParamSet) Specifies domain function. paradox::ParamSet describe possible input parameters objective function. includes id, types possible range. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. id (character(1)). properties (character()). constants (paradox::ParamSet) Changeable constants parameters subject tuning can stored accessed . check_values (logical(1)) points evaluation results checked validity?","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Objective interface with custom R function — ObjectiveRFun","text":"Evaluates input value(s) objective function. Calls R function supplied user.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface with custom R function — ObjectiveRFun","text":"","code":"ObjectiveRFun$eval(xs)"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface with custom R function — ObjectiveRFun","text":"xs Input values.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Objective interface with custom R function — ObjectiveRFun","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface with custom R function — ObjectiveRFun","text":"","code":"ObjectiveRFun$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface with custom R function — ObjectiveRFun","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective interface with custom R function — ObjectiveRFun","text":"","code":"# define objective function fun = function(xs) {   -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10 }  # set domain domain = ps(   x1 = p_dbl(-10, 10),   x2 = p_dbl(-5, 5) )  # set codomain codomain = ps(y = p_dbl(tags = \"maximize\"))  # create Objective object obfun = ObjectiveRFun$new(   fun = fun,   domain = domain,   codomain = codomain,   properties = \"deterministic\" )"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective interface for basic R functions. — ObjectiveRFunDt","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"Objective interface user can pass R function works data.table().","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"bbotk::Objective -> ObjectiveRFunDt","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"fun (function) Objective function.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"bbotk::Objective$eval() bbotk::Objective$format() bbotk::Objective$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"ObjectiveRFunDt$new() ObjectiveRFunDt$eval_many() ObjectiveRFunDt$eval_dt() ObjectiveRFunDt$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"","code":"ObjectiveRFunDt$new(   fun,   domain,   codomain = NULL,   id = \"function\",   properties = character(),   constants = ps(),   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"fun (function) R function encodes objective expects data.table() input whereas point represented one row. domain (paradox::ParamSet) Specifies domain function. paradox::ParamSet describe possible input parameters objective function. includes id, types possible range. codomain (paradox::ParamSet) Specifies codomain function. importantly tags output \"Parameter\" define whether minimized maximized.  default minimize component. id (character(1)). properties (character()). constants (paradox::ParamSet) Changeable constants parameters subject tuning can stored accessed . check_values (logical(1)) points evaluation results checked validity?","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"method-eval-many-","dir":"Reference","previous_headings":"","what":"Method eval_many()","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"Evaluates multiple input values received list, converted data.table() objective function. Missing columns xss filled NAs xdt.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"","code":"ObjectiveRFunDt$eval_many(xss)"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"xss (list()) list lists contains multiple x values, e.g. list(list(x1 = 1, x2 = 2), list(x1 = 3, x2 = 4)).","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"data.table::data.table() contains one y-column single-criteria functions multiple y-columns multi-criteria functions, e.g. data.table(y = 1:2) data.table(y1 = 1:2, y2 = 3:4).","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"method-eval-dt-","dir":"Reference","previous_headings":"","what":"Method eval_dt()","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"Evaluates multiple input values objective function supplied user.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"","code":"ObjectiveRFunDt$eval_dt(xdt)"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"data.table::data.table()] contains one y-column single-criteria functions multiple y-columns multi-criteria functions, e.g. data.table(y = 1:2) data.table(y1 = 1:2, y2 = 3:4).","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"","code":"ObjectiveRFunDt$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/ObjectiveRFunDt.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective interface for basic R functions. — ObjectiveRFunDt","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization Instance with budget and archive — OptimInstance","title":"Optimization Instance with budget and archive — OptimInstance","text":"Abstract base class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"Optimization Instance with budget and archive — OptimInstance","text":"Optimizer writes final result .result field using $assign_result() method. .result stores data.table::data.table consisting x values search space, (transformed) x values domain space y values codomain space Objective. user can access results active bindings (see ).","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Optimization Instance with budget and archive — OptimInstance","text":"objective (Objective). search_space (paradox::ParamSet). terminator (Terminator). archive (Archive). progressor (progressor()) Stores progressor function. objective_multiplicator (integer()).","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Optimization Instance with budget and archive — OptimInstance","text":"result (data.table::data.table) Get result result_x_search_space (data.table::data.table) x part result search space. result_x_domain (list()) (transformed) x part result domain space objective. result_y (numeric()) Optimal outcome. is_terminated (logical(1)).","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization Instance with budget and archive — OptimInstance","text":"OptimInstance$new() OptimInstance$format() OptimInstance$print() OptimInstance$eval_batch() OptimInstance$assign_result() OptimInstance$objective_function() OptimInstance$clear() OptimInstance$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$new(   objective,   search_space = NULL,   terminator,   keep_evals = \"all\",   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"objective (Objective). search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective. terminator (Terminator). keep_evals (character(1)) Keep best evaluations archive? check_values (logical(1)) x-values added archive checked validity? Search space logged archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Helper print outputs.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$format()"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Printer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$print(...)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"... (ignored).","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-eval-batch-","dir":"Reference","previous_headings":"","what":"Method eval_batch()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Evaluates input values xdt calling Objective. Applies possible transformations input values writes results Archive. batch-evaluation, Terminator checked, positive, exception class terminated_error raised. function internally called Optimizer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$eval_batch(xdt)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"xdt (data.table::data.table()) x values data.table() one point per row. Contains value search space OptimInstance object. Can contain additional columns extra information.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Optimizer object writes best found point estimated performance value . internal use.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$assign_result(xdt, y)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"xdt (data.table::data.table()) x values data.table::data.table() one row. Contains value search space OptimInstance object. Can contain additional columns extra information. y (numeric(1)) Optimal outcome.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-objective-function-","dir":"Reference","previous_headings":"","what":"Method objective_function()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Evaluates (untransformed) points numeric values. Returns numeric scalar single-crit numeric vector multi-crit. return value(s) negated measure maximized. Internally, $eval_batch() called single row. function serves objective function optimizers numeric spaces - always minimized.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$objective_function(x)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"x (numeric()) Untransformed points.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Optimization Instance with budget and archive — OptimInstance","text":"Objective value numeric(1), negated maximization problems.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-clear-","dir":"Reference","previous_headings":"","what":"Method clear()","title":"Optimization Instance with budget and archive — OptimInstance","text":"Reset terminator clear evaluation results archive results.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$clear()"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization Instance with budget and archive — OptimInstance","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstance","text":"","code":"OptimInstance$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstance.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstance","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"Wraps multi-criteria Objective function extra services convenient evaluation. Inherits OptimInstance. Automatic storing results Archive evaluation. Automatic checking termination. Evaluations design points performed batches. batch evaluated, Terminator queried remaining budget. available budget exhausted, exception raised, evaluations can performed point .","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"bbotk::OptimInstance -> OptimInstanceMultiCrit","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"result_x_domain (list()) (transformed) x part result domain space objective. result_y (numeric(1)) Optimal outcome.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"bbotk::OptimInstance$clear() bbotk::OptimInstance$eval_batch() bbotk::OptimInstance$format() bbotk::OptimInstance$objective_function() bbotk::OptimInstance$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"OptimInstanceMultiCrit$new() OptimInstanceMultiCrit$assign_result() OptimInstanceMultiCrit$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"","code":"OptimInstanceMultiCrit$new(   objective,   search_space = NULL,   terminator,   keep_evals = \"all\",   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"objective (Objective). search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective. terminator (Terminator) Multi-criteria terminator. keep_evals (character(1)) Keep best evaluations archive? check_values (logical(1)) x-values added archive checked validity? Search space logged archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"Optimizer object writes best found points estimated performance values (probably Pareto set / front). internal use.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"","code":"OptimInstanceMultiCrit$assign_result(xdt, ydt)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns. ydt (numeric(1)) Optimal outcomes, e.g. Pareto front.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"","code":"OptimInstanceMultiCrit$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceMultiCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceMultiCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"Wraps single-criteria Objective function extra services convenient evaluation. Inherits OptimInstance. Automatic storing results Archive evaluation. Automatic checking termination. Evaluations design points performed batches. batch evaluated, Terminator queried remaining budget. available budget exhausted, exception raised, evaluations can performed point .","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"bbotk::OptimInstance -> OptimInstanceSingleCrit","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"bbotk::OptimInstance$clear() bbotk::OptimInstance$eval_batch() bbotk::OptimInstance$format() bbotk::OptimInstance$objective_function() bbotk::OptimInstance$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"OptimInstanceSingleCrit$new() OptimInstanceSingleCrit$assign_result() OptimInstanceSingleCrit$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"","code":"OptimInstanceSingleCrit$new(   objective,   search_space = NULL,   terminator,   keep_evals = \"all\",   check_values = TRUE )"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"objective (Objective). search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective. terminator (Terminator). keep_evals (character(1)) Keep best evaluations archive? check_values (logical(1)) x-values added archive checked validity? Search space logged archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"method-assign-result-","dir":"Reference","previous_headings":"","what":"Method assign_result()","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"Optimizer object writes best found point estimated performance value . internal use.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"","code":"OptimInstanceSingleCrit$assign_result(xdt, y)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns. y (numeric(1)) Optimal outcome.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"","code":"OptimInstanceSingleCrit$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/OptimInstanceSingleCrit.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization Instance with budget and archive — OptimInstanceSingleCrit","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer — Optimizer","title":"Optimizer — Optimizer","text":"Abstract Optimizer class implements base functionality Optimizer subclass must provide. Optimizer object describes optimization strategy. Optimizer object must write result $assign_result() method OptimInstance end order store best point estimated performance vector.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer — Optimizer","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Optimizer — Optimizer","text":"id (character(1)) Identifier object. Used tables, plot text output.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Optimizer — Optimizer","text":"param_set paradox::ParamSet Set control parameters. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). param_classes (character()) Supported parameter classes optimizer can optimize. Subclasses paradox::Param. properties (character()) Set properties optimizer. Must subset bbotk_reflections$optimizer_properties. packages (character()) Set required packages. warning signaled constructor least one packages installed, loaded (attached) later -demand via requireNamespace().","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer — Optimizer","text":"Optimizer$new() Optimizer$format() Optimizer$print() Optimizer$help() Optimizer$optimize() Optimizer$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer — Optimizer","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$new(   id = \"optimizer\",   param_set,   param_classes,   properties,   packages = character(),   label = NA_character_,   man = NA_character_ )"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer — Optimizer","text":"id (character(1)) Identifier new instance. param_set (paradox::ParamSet) Set control parameters. param_classes (character()) Supported parameter classes optimizer can optimize. Subclasses paradox::Param. properties (character()) Set properties optimizer. Must subset bbotk_reflections$optimizer_properties. packages (character()) Set required packages. warning signaled constructor least one packages installed, loaded (attached) later -demand via requireNamespace(). label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Optimizer — Optimizer","text":"Helper print outputs.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$format()"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Optimizer — Optimizer","text":"Print method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$print()"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Optimizer — Optimizer","text":"(character()).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"Optimizer — Optimizer","text":"Opens corresponding help page referenced field $man.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$help()"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Optimizer — Optimizer","text":"Performs optimization writes optimization result OptimInstance. optimization result returned complete optimization path stored Archive OptimInstance.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$optimize(inst)"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer — Optimizer","text":"inst (OptimInstance).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Optimizer — Optimizer","text":"data.table::data.table.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer — Optimizer","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer — Optimizer","text":"","code":"Optimizer$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Optimizer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer — Optimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":null,"dir":"Reference","previous_headings":"","what":"Progressor — Progressor","title":"Progressor — Progressor","text":"Wraps progressr::progressor() function stores current progress.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Progressor — Progressor","text":"progressor (progressr::progressor()). max_steps (integer(1)). current_steps (integer(1)). unit (character(1)).","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Progressor — Progressor","text":"Progressor$new() Progressor$update() Progressor$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Progressor — Progressor","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progressor — Progressor","text":"","code":"Progressor$new(progressor, unit)"},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progressor — Progressor","text":"progressor (progressr::progressor()) Progressor function. unit (character(1)) Unit progress.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Progressor — Progressor","text":"Updates progressr::progressor() current steps.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Progressor — Progressor","text":"","code":"Progressor$update(terminator, archive)"},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progressor — Progressor","text":"terminator (Terminator). archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Progressor — Progressor","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Progressor — Progressor","text":"","code":"Progressor$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Progressor.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progressor — Progressor","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract Terminator Class — Terminator","title":"Abstract Terminator Class — Terminator","text":"Abstract Terminator class implements base functionality terminator must provide. terminator object determines stop optimization. Termination optimization works follows: Evaluations instance performed batches. batch evaluation, Terminator checked, positive, stop. optimization algorithm might decide produce points, even might decide smaller batch last evaluation. Therefore following note seems order: definitely possible execute fine-grained control termination, many optimization algorithms can specify exactly stop, might happen even many evaluations performed, especially multiple points evaluated single batch (c.f. batch size parameter many optimization algorithms). advised check size returned archive, particular benchmarking multiple optimization algorithms.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"Abstract Terminator Class — Terminator","text":"Terminator subclasses can overwrite .status() support progress bars via package progressr. method must return maximum number steps (max_steps) currently achieved number steps (current_steps) named integer vector.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Abstract Terminator Class — Terminator","text":"id (character(1)) Identifier object. Used tables, plot text output.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract Terminator Class — Terminator","text":"param_set paradox::ParamSet Set control parameters. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help(). properties (character()) Set properties terminator. Must subset bbotk_reflections$terminator_properties. unit (character()) Unit steps.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract Terminator Class — Terminator","text":"Terminator$new() Terminator$format() Terminator$print() Terminator$status() Terminator$remaining_time() Terminator$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Abstract Terminator Class — Terminator","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$new(   id,   param_set = ps(),   properties = character(),   unit = \"percent\",   label = NA_character_,   man = NA_character_ )"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"id (character(1)) Identifier new instance. param_set (paradox::ParamSet) Set control parameters. properties (character()) Set properties terminator. Must subset bbotk_reflections$terminator_properties. unit (character()) Unit steps. label (character(1)) Label object. Can used tables, plot text output instead ID. man (character(1)) String format [pkg]::[topic] pointing manual page object. referenced help package can opened via method $help().","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Abstract Terminator Class — Terminator","text":"Helper print outputs.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$format(with_params = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"with_params (logical(1)) Add parameter values format string.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Abstract Terminator Class — Terminator","text":"Printer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$print(...)"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"... (ignored).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"Abstract Terminator Class — Terminator","text":"Returns many progression steps made (current_steps) amount steps needed termination (max_steps).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$status(archive)"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract Terminator Class — Terminator","text":"named integer(2).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-remaining-time-","dir":"Reference","previous_headings":"","what":"Method remaining_time()","title":"Abstract Terminator Class — Terminator","text":"Returns remaining runtime seconds. terminator time-based, reaming runtime Inf.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$remaining_time(archive)"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract Terminator Class — Terminator","text":"integer(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Abstract Terminator Class — Terminator","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract Terminator Class — Terminator","text":"","code":"Terminator$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/Terminator.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract Terminator Class — Terminator","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/assign_result_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default assign_result function — assign_result_default","title":"Default assign_result function — assign_result_default","text":"Used internally Optimizer. default way determine result simply obtaining best performing result archive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/assign_result_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default assign_result function — assign_result_default","text":"","code":"assign_result_default(inst)"},{"path":"https://bbotk.mlr-org.com/reference/assign_result_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default assign_result function — assign_result_default","text":"inst OptimInstance","code":""},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Black-Box Optimization — bb_optimize","title":"Black-Box Optimization — bb_optimize","text":"function optimizes function Objective given method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Black-Box Optimization — bb_optimize","text":"","code":"bb_optimize(   x,   method = \"random_search\",   max_evals = 1000,   max_time = NULL,   ... )  # S3 method for `function` bb_optimize(   x,   method = \"random_search\",   max_evals = 1000,   max_time = NULL,   lower = NULL,   upper = NULL,   maximize = FALSE,   ... )  # S3 method for Objective bb_optimize(   x,   method = \"random_search\",   max_evals = 1000,   max_time = NULL,   search_space = NULL,   ... )"},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Black-Box Optimization — bb_optimize","text":"x (function | Objective). method (character(1) | Optimizer) Key retrieve optimizer mlr_optimizers dictionary Optimizer. max_evals (integer(1)) Number allowed evaluations. max_time (integer(1)) Maximum allowed time seconds. ... (named list()) Named arguments passed objective function. Ignored Objective optimized. lower (numeric()) Lower bounds parameters. named, names used create domain. upper (numeric()) Upper bounds parameters. maximize (logical()) Logical vector used create codomain e.g. c(TRUE, FALSE) -> ps(y1 = p_dbl(tags = \"maximize\"), y2 = pd_dbl(tags = \"minimize\")). named, names used create codomain. search_space (paradox::ParamSet).","code":""},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Black-Box Optimization — bb_optimize","text":"list \"par\" - Best found parameters \"value\" - Optimal outcome \"instance\" - OptimInstanceSingleCrit | OptimInstanceMultiCrit","code":""},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Black-Box Optimization — bb_optimize","text":"max_evals max_time NULL, TerminatorNone used. useful Optimizer can terminate . given, TerminatorCombo created optimization stops time evaluation budget exhausted.","code":""},{"path":"https://bbotk.mlr-org.com/reference/bb_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Black-Box Optimization — bb_optimize","text":"","code":"# function and bounds fun = function(xs) {   -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10 }  bb_optimize(fun, lower = c(-10, -5), upper = c(10, 5), max_evals = 10) #> $par #>          x1       x2 #> 1: -8.11764 2.689663 #>  #> $value #>        y1  #> -124.7389  #>  #> $instance #> <OptimInstanceSingleCrit> #> * State:  Optimized #> * Objective: <ObjectiveRFun:function> #> * Search Space: #>    id    class lower upper nlevels #> 1: x1 ParamDbl   -10    10     Inf #> 2: x2 ParamDbl    -5     5     Inf #> * Terminator: <TerminatorEvals> #> * Result: #>          x1       x2        y1 #> 1: -8.11764 2.689663 -124.7389 #> * Archive: #>            x1         x2          y1 #>  1:  0.974324  1.1553186   -8.318683 #>  2:  2.472354  3.4946910  -32.404130 #>  3:  3.057614 -2.5146578    8.645895 #>  4: -5.639827  3.0197140  -84.603915 #>  5:  6.760192  0.8111856  -27.184561 #>  6:  4.709036 -3.1916958    2.624378 #>  7:  9.086317  4.9351192 -103.182000 #>  8: -4.674281 -2.8779386  -34.560929 #>  9:  5.249186  3.3952208  -41.456060 #> 10: -8.117640  2.6896626 -124.738890 #>   # function and constant fun = function(xs, c) {   -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + c }  bb_optimize(fun, lower = c(-10, -5), upper = c(10, 5), max_evals = 10, c = 1) #> $par #>           x1        x2 #> 1: -9.043821 -2.984864 #>  #> $value #>        y1  #> -120.9662  #>  #> $instance #> <OptimInstanceSingleCrit> #> * State:  Optimized #> * Objective: <ObjectiveRFun:function> #> * Search Space: #>    id    class lower upper nlevels #> 1: x1 ParamDbl   -10    10     Inf #> 2: x2 ParamDbl    -5     5     Inf #> * Terminator: <TerminatorEvals> #> * Result: #>           x1        x2        y1 #> 1: -9.043821 -2.984864 -120.9662 #> * Archive: #>            x1         x2          y1 #>  1:  6.289944 -3.4420308  -17.599010 #>  2:  2.808963  2.7833402  -33.101445 #>  3:  4.178244 -1.2300531   -6.877459 #>  4:  8.215465  1.3494688  -56.549881 #>  5: -4.580676  2.9860914  -78.138583 #>  6:  3.191369  4.8658877  -62.291549 #>  7: -9.043821 -2.9848641 -120.966207 #>  8: -8.104758 -2.5566187 -101.302725 #>  9: -5.426504 -0.7302104  -59.304902 #> 10: -2.640622  4.5514505  -77.559776 #>   # objective fun = function(xs) {   c(z = -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10) }  # define domain and codomain using a `ParamSet` from paradox domain = ps(x1 = p_dbl(-10, 10), x2 = p_dbl(-5, 5)) codomain = ps(z = p_dbl(tags = \"minimize\")) objective = ObjectiveRFun$new(fun, domain, codomain)  bb_optimize(objective, method = \"random_search\", max_evals = 10) #> $par #>           x1       x2 #> 1: -8.894326 4.636301 #>  #> $value #>         z  #> -166.9994  #>  #> $instance #> <OptimInstanceSingleCrit> #> * State:  Optimized #> * Objective: <ObjectiveRFun:function> #> * Search Space: #>    id    class lower upper nlevels #> 1: x1 ParamDbl   -10    10     Inf #> 2: x2 ParamDbl    -5     5     Inf #> * Terminator: <TerminatorEvals> #> * Result: #>           x1       x2         z #> 1: -8.894326 4.636301 -166.9994 #> * Archive: #>             x1         x2          z #>  1: -6.9645044  1.2910423  -88.77538 #>  2: -1.8834429  0.9177800  -20.43013 #>  3:  0.5550879  4.0592357  -41.92058 #>  4:  1.5779615  3.6556748  -34.47612 #>  5: -1.7089209  3.4552488  -45.42633 #>  6: -4.8823638 -1.5236424  -39.54656 #>  7: -8.8943260  4.6363008 -166.99943 #>  8: -9.2826015 -2.2709473 -117.82861 #>  9:  8.2907561 -0.7301557  -34.72581 #> 10: -2.4742671  3.1394519  -47.71194 #>"},{"path":"https://bbotk.mlr-org.com/reference/bbotk-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bbotk: Black-Box Optimization Toolkit — bbotk-package","title":"bbotk: Black-Box Optimization Toolkit — bbotk-package","text":"Provides common framework optimization black-box functions packages, e.g. 'mlr3tuning' 'mlr3fselect'. offers various optimization methods e.g. grid search, random search, generalized simulated annealing iterated racing.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/bbotk-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bbotk: Black-Box Optimization Toolkit — bbotk-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Jakob Richter jakob1richter@gmail.com (ORCID) Michel Lang michellang@gmail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID) Martin Binder martin.binder@mail.com contributors: Olaf Mersmann olafm@statistik.tu-dortmund.de [contributor]","code":""},{"path":"https://bbotk.mlr-org.com/reference/bbotk_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for bbotk objects — bbotk_assertions","title":"Assertion for bbotk objects — bbotk_assertions","text":"assertion functions ensure right class attribute, optionally additional properties. Additionally, following compound assertions implemented: assert_terminable(terminator, instance) (Terminator, OptimInstance) -> NULL Checks terminator applicable optimization. assert_instance_properties(optimizer, instance) (Optimizer, OptimInstance) -> NULL Checks instance applicable optimizer. assertion fails, exception raised. Otherwise, input object returned invisibly.","code":""},{"path":"https://bbotk.mlr-org.com/reference/bbotk_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for bbotk objects — bbotk_assertions","text":"","code":"assert_terminator(terminator, instance = NULL)  assert_terminable(terminator, instance)  assert_set(x, empty = TRUE, .var.name = vname(x))  assert_optimizer(optimizer)  assert_instance_properties(optimizer, inst)"},{"path":"https://bbotk.mlr-org.com/reference/bbotk_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for bbotk objects — bbotk_assertions","text":"terminator (Terminator). instance (OptimInstance). x () empty (logical(1)) .var.name (character(1)) optimizer (Optimizer).","code":""},{"path":"https://bbotk.mlr-org.com/reference/bbotk_reflections.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflections for bbotk — bbotk_reflections","title":"Reflections for bbotk — bbotk_reflections","text":"Environment stores various information allow objects examine introspect structure properties (c.f. Reflections). environment modified third-party packages. following objects set bbotk: optimizer_properties (character()) Properties optimizer, e.g. \"dependencies\". objective_properties (character()) Properties objective, e.g. \"noisy\".","code":""},{"path":"https://bbotk.mlr-org.com/reference/bbotk_reflections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflections for bbotk — bbotk_reflections","text":"","code":"bbotk_reflections"},{"path":"https://bbotk.mlr-org.com/reference/bbotk_reflections.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reflections for bbotk — bbotk_reflections","text":"environment.","code":""},{"path":"https://bbotk.mlr-org.com/reference/bbotk_reflections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reflections for bbotk — bbotk_reflections","text":"","code":"ls.str(bbotk_reflections) #> objective_properties :  chr [1:4] \"noisy\" \"single-crit\" \"multi-crit\" \"deterministic\" #> optimizer_properties :  chr [1:3] \"dependencies\" \"single-crit\" \"multi-crit\" #> terminator_properties :  chr [1:2] \"single-crit\" \"multi-crit\""},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":null,"dir":"Reference","previous_headings":"","what":"Branin Function — branin","title":"Branin Function — branin","text":"Augmented 2-D Branin function fidelity parameter.","code":""},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branin Function — branin","text":"","code":"branin(xs)"},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Branin Function — branin","text":"Wu J, Toscano-Palmerin S, Frazier PI, Wilson AG (2019). “Practical Multi-fidelity Bayesian Optimization Hyperparameter Tuning.” 1903.04703.","code":""},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branin Function — branin","text":"xs List input single point (e.g. list(x1 = 1, x2 = 2, fidelity = 0.5)).","code":""},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branin Function — branin","text":"list(1)","code":""},{"path":"https://bbotk.mlr-org.com/reference/branin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branin Function — branin","text":"","code":"branin(list(x1 = 12, x2 = 2, fidelity = 1)) #> $y #> [1] 30.38063 #>"},{"path":"https://bbotk.mlr-org.com/reference/is_dominated.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate which points are dominated — is_dominated","title":"Calculate which points are dominated — is_dominated","text":"Returns points set dominated another point set.","code":""},{"path":"https://bbotk.mlr-org.com/reference/is_dominated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate which points are dominated — is_dominated","text":"","code":"is_dominated(ymat)"},{"path":"https://bbotk.mlr-org.com/reference/is_dominated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate which points are dominated — is_dominated","text":"ymat (matrix())  numeric matrix. column (!) contains one point.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Optimizer — mlr_optimizers","title":"Dictionary of Optimizer — mlr_optimizers","text":"simple mlr3misc::Dictionary storing objects class Optimizer. optimizer associated help page, see mlr_optimizer_[id]. dictionary can get populated additional optimizer add-packages. convenient way retrieve construct optimizer, see opt()/opts().","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of Optimizer — mlr_optimizers","text":"R6::R6Class object inheriting mlr3misc::Dictionary.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dictionary of Optimizer — mlr_optimizers","text":"See mlr3misc::Dictionary.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Dictionary of Optimizer — mlr_optimizers","text":".data.table(dict, ..., objects = FALSE)mlr3misc::Dictionary -> data.table::data.table() Returns data.table::data.table() fields \"key\", \"label\", \"param_classes\", \"properties\" \"packages\" columns. objects set TRUE, constructed objects returned list column named object.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Optimizer — mlr_optimizers","text":"","code":"as.data.table(mlr_optimizers) #>              key                                           label #> 1:         cmaes Covariance Matrix Adaptation Evolution Strategy #> 2: design_points                                   Design Points #> 3:  focus_search                                    Focus Search #> 4:         gensa                 Generalized Simulated Annealing #> 5:   grid_search                                     Grid Search #> 6:         irace                                 Iterated Racing #> 7:        nloptr                         Non-linear Optimization #> 8: random_search                                   Random Search #>                                   param_classes #> 1:                                     ParamDbl #> 2: ParamLgl,ParamInt,ParamDbl,ParamFct,ParamUty #> 3:          ParamLgl,ParamInt,ParamDbl,ParamFct #> 4:                                     ParamDbl #> 5:          ParamLgl,ParamInt,ParamDbl,ParamFct #> 6:          ParamDbl,ParamInt,ParamFct,ParamLgl #> 7:                                     ParamDbl #> 8:          ParamLgl,ParamInt,ParamDbl,ParamFct #>                             properties     packages #> 1:                         single-crit bbotk,adagio #> 2: dependencies,single-crit,multi-crit        bbotk #> 3:            dependencies,single-crit        bbotk #> 4:                         single-crit  bbotk,GenSA #> 5: dependencies,single-crit,multi-crit        bbotk #> 6:            dependencies,single-crit  bbotk,irace #> 7:                         single-crit bbotk,nloptr #> 8: dependencies,single-crit,multi-crit        bbotk mlr_optimizers$get(\"random_search\") #> <OptimizerRandomSearch>: Random Search #> * Parameters: batch_size=1 #> * Parameter classes: ParamLgl, ParamInt, ParamDbl, ParamFct #> * Properties: dependencies, single-crit, multi-crit #> * Packages: bbotk opt(\"random_search\") #> <OptimizerRandomSearch>: Random Search #> * Parameters: batch_size=1 #> * Parameter classes: ParamLgl, ParamInt, ParamDbl, ParamFct #> * Properties: dependencies, single-crit, multi-crit #> * Packages: bbotk"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"OptimizerCmaes class implements CMA-ES. Calls adagio::pureCMAES() package adagio. algorithm typically applied search space dimensions three fifty. Lower search space dimensions might crash.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"cmaes\") opt(\"cmaes\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"sigma numeric(1) start_values character(1) Create random start values based center search space? latter case, center parameters trafo applied. meaning control parameters, see adagio::pureCMAES(). Note removed control parameters refer termination algorithm terminators allow obtain behavior.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"bbotk::Optimizer -> OptimizerCmaes","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"OptimizerCmaes$new() OptimizerCmaes$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"","code":"OptimizerCmaes$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"","code":"OptimizerCmaes$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_cmaes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Covariance Matrix Adaptation Evolution Strategy — mlr_optimizers_cmaes","text":"","code":"if (requireNamespace(\"adagio\")) {   search_space = domain = ps(     x1 = p_dbl(-10, 10),     x2 = p_dbl(-5, 5)   )    codomain = ps(y = p_dbl(tags = \"maximize\"))    objective_function = function(xs) {     c(y = -(xs[[1]] - 2)^2 - (xs[[2]] + 3)^2 + 10)   }    objective = ObjectiveRFun$new(     fun = objective_function,     domain = domain,     codomain = codomain)    instance = OptimInstanceSingleCrit$new(     objective = objective,     search_space = search_space,     terminator = trm(\"evals\", n_evals = 10))    optimizer = opt(\"cmaes\")    # modifies the instance by reference   optimizer$optimize(instance)    # returns best scoring evaluation   instance$result    # allows access of data.table of full path of all evaluations   as.data.table(instance$archive$data) } #>            x1         x2           y  x_domain           timestamp batch_nr #>  1: 10.000000 -4.2902429  -55.664727 <list[2]> 2022-07-19 04:42:12        1 #>  2:  8.780762  0.1436437  -45.861224 <list[2]> 2022-07-19 04:42:12        2 #>  3: -1.518278 -0.6085574   -8.097278 <list[2]> 2022-07-19 04:42:12        3 #>  4: -7.348663  1.6574330  -99.089184 <list[2]> 2022-07-19 04:42:12        4 #>  5: -9.256329  3.9294950 -164.722851 <list[2]> 2022-07-19 04:42:12        5 #>  6: 10.000000 -5.0000000  -58.000000 <list[2]> 2022-07-19 04:42:12        6 #>  7: -6.579187 -4.7580542  -66.693202 <list[2]> 2022-07-19 04:42:12        7 #>  8:  4.977989  1.0137738  -14.978797 <list[2]> 2022-07-19 04:42:12        8 #>  9:  7.832774 -1.3304710  -26.808576 <list[2]> 2022-07-19 04:42:12        9 #> 10: -4.241848 -5.0000000  -32.960672 <list[2]> 2022-07-19 04:42:12       10"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Design Points — mlr_optimizers_design_points","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"OptimizerDesignPoints class implements optimization w.r.t. fixed design points. simply search set points fully specified user. points design evaluated order given. order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. Larger batches mean can parallelize , smaller batches imply fine-grained checking termination criteria.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"design_points\") opt(\"design_points\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"batch_size integer(1) Maximum number configurations try batch. design data.table::data.table Design points try search, one per row.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"bbotk::Optimizer -> OptimizerDesignPoints","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"OptimizerDesignPoints$new() OptimizerDesignPoints$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"","code":"OptimizerDesignPoints$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"","code":"OptimizerDesignPoints$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_design_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Design Points — mlr_optimizers_design_points","text":"","code":"library(data.table) search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))  codomain = ps(y = p_dbl(tags = \"minimize\"))  objective_function = function(xs) {   list(y = as.numeric(xs)^2) }  objective = ObjectiveRFun$new(   fun = objective_function,   domain = domain,   codomain = codomain)  instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 10))  design = data.table(x = c(0, 1))  optimizer = opt(\"design_points\", design = design)  # Modifies the instance by reference optimizer$optimize(instance) #>    x  x_domain y #> 1: 0 <list[1]> 0  # Returns best scoring evaluation instance$result #>    x  x_domain y #> 1: 0 <list[1]> 0  # Allows access of data.table of full path of all evaluations as.data.table(instance$archive) #>    x y           timestamp batch_nr x_domain_x #> 1: 0 0 2022-07-19 04:42:12        1          0 #> 2: 1 1 2022-07-19 04:42:12        2          1"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Focus Search — mlr_optimizers_focus_search","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"OptimizerFocusSearch class implements Focus Search. Focus Search starts evaluating n_points drawn uniformly random. 1 maxit batches, n_points drawn uniformly random best value batch outperforms previous best value batches evaluated far, search space shrinked around new best point prior next batch sampled evaluated. details shrinking, see shrink_ps. Depending Terminator procedure simply restarts maxit reached.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"focus_search\") opt(\"focus_search\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"n_points integer(1) Number points evaluate random search batch. maxit integer(1) Number random search batches run.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"bbotk::Optimizer -> OptimizerFocusSearch","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"OptimizerFocusSearch$new() OptimizerFocusSearch$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"","code":"OptimizerFocusSearch$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"","code":"OptimizerFocusSearch$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_focus_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Focus Search — mlr_optimizers_focus_search","text":"","code":"search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))  codomain = ps(y = p_dbl(tags = \"minimize\"))  objective_function = function(xs) {   list(y = as.numeric(xs)^2) }  objective = ObjectiveRFun$new(  fun = objective_function,  domain = domain,  codomain = codomain)  instance = OptimInstanceSingleCrit$new(  objective = objective,  search_space = search_space,  terminator = trm(\"evals\", n_evals = 10))   optimizer = opt(\"focus_search\")  # modifies the instance by reference optimizer$optimize(instance) #>              x  x_domain            y #> 1: 0.006453105 <list[1]> 4.164256e-05  # returns best scoring evaluation instance$result #>              x  x_domain            y #> 1: 0.006453105 <list[1]> 4.164256e-05  # allows access of data.table of full path of all evaluations as.data.table(instance$archive$data) #>                 x            y  x_domain           timestamp batch_nr #>   1: -0.696020468 4.844445e-01 <list[1]> 2022-07-19 04:42:13        1 #>   2: -0.194484406 3.782418e-02 <list[1]> 2022-07-19 04:42:13        1 #>   3: -0.653589382 4.271791e-01 <list[1]> 2022-07-19 04:42:13        1 #>   4: -0.560629835 3.143058e-01 <list[1]> 2022-07-19 04:42:13        1 #>   5: -0.573151431 3.285026e-01 <list[1]> 2022-07-19 04:42:13        1 #>   6:  0.557499225 3.108054e-01 <list[1]> 2022-07-19 04:42:13        1 #>   7: -0.100860097 1.017276e-02 <list[1]> 2022-07-19 04:42:13        1 #>   8:  0.835384947 6.978680e-01 <list[1]> 2022-07-19 04:42:13        1 #>   9: -0.118231380 1.397866e-02 <list[1]> 2022-07-19 04:42:13        1 #>  10: -0.871729489 7.599123e-01 <list[1]> 2022-07-19 04:42:13        1 #>  11:  0.065110143 4.239331e-03 <list[1]> 2022-07-19 04:42:13        1 #>  12: -0.348358454 1.213536e-01 <list[1]> 2022-07-19 04:42:13        1 #>  13: -0.430821435 1.856071e-01 <list[1]> 2022-07-19 04:42:13        1 #>  14:  0.529507056 2.803777e-01 <list[1]> 2022-07-19 04:42:13        1 #>  15:  0.163051754 2.658587e-02 <list[1]> 2022-07-19 04:42:13        1 #>  16: -0.707001617 4.998513e-01 <list[1]> 2022-07-19 04:42:13        1 #>  17:  0.274466859 7.533206e-02 <list[1]> 2022-07-19 04:42:13        1 #>  18:  0.286715042 8.220552e-02 <list[1]> 2022-07-19 04:42:13        1 #>  19: -0.395131395 1.561288e-01 <list[1]> 2022-07-19 04:42:13        1 #>  20:  0.706196828 4.987140e-01 <list[1]> 2022-07-19 04:42:13        1 #>  21:  0.361774981 1.308811e-01 <list[1]> 2022-07-19 04:42:13        1 #>  22: -0.364901253 1.331529e-01 <list[1]> 2022-07-19 04:42:13        1 #>  23:  0.398923060 1.591396e-01 <list[1]> 2022-07-19 04:42:13        1 #>  24:  0.495014477 2.450393e-01 <list[1]> 2022-07-19 04:42:13        1 #>  25: -0.653474628 4.270291e-01 <list[1]> 2022-07-19 04:42:13        1 #>  26: -0.290107907 8.416260e-02 <list[1]> 2022-07-19 04:42:13        1 #>  27:  0.910752147 8.294695e-01 <list[1]> 2022-07-19 04:42:13        1 #>  28:  0.011148516 1.242894e-04 <list[1]> 2022-07-19 04:42:13        1 #>  29:  0.614170675 3.772056e-01 <list[1]> 2022-07-19 04:42:13        1 #>  30:  0.356048304 1.267704e-01 <list[1]> 2022-07-19 04:42:13        1 #>  31:  0.678078160 4.597900e-01 <list[1]> 2022-07-19 04:42:13        1 #>  32:  0.371450232 1.379753e-01 <list[1]> 2022-07-19 04:42:13        1 #>  33:  0.936183558 8.764397e-01 <list[1]> 2022-07-19 04:42:13        1 #>  34: -0.705390017 4.975751e-01 <list[1]> 2022-07-19 04:42:13        1 #>  35:  0.073735834 5.436973e-03 <list[1]> 2022-07-19 04:42:13        1 #>  36: -0.164977651 2.721763e-02 <list[1]> 2022-07-19 04:42:13        1 #>  37:  0.408770734 1.670935e-01 <list[1]> 2022-07-19 04:42:13        1 #>  38: -0.958812916 9.193222e-01 <list[1]> 2022-07-19 04:42:13        1 #>  39:  0.872513904 7.612805e-01 <list[1]> 2022-07-19 04:42:13        1 #>  40: -0.768128711 5.900217e-01 <list[1]> 2022-07-19 04:42:13        1 #>  41:  0.682119816 4.652874e-01 <list[1]> 2022-07-19 04:42:13        1 #>  42: -0.083064906 6.899779e-03 <list[1]> 2022-07-19 04:42:13        1 #>  43:  0.197514514 3.901198e-02 <list[1]> 2022-07-19 04:42:13        1 #>  44:  0.946160028 8.952188e-01 <list[1]> 2022-07-19 04:42:13        1 #>  45:  0.892091373 7.958270e-01 <list[1]> 2022-07-19 04:42:13        1 #>  46: -0.807084627 6.513856e-01 <list[1]> 2022-07-19 04:42:13        1 #>  47: -0.906194106 8.211878e-01 <list[1]> 2022-07-19 04:42:13        1 #>  48: -0.135793180 1.843979e-02 <list[1]> 2022-07-19 04:42:13        1 #>  49: -0.216265774 4.677088e-02 <list[1]> 2022-07-19 04:42:13        1 #>  50:  0.142612530 2.033833e-02 <list[1]> 2022-07-19 04:42:13        1 #>  51:  0.035020588 1.226442e-03 <list[1]> 2022-07-19 04:42:13        1 #>  52: -0.556283360 3.094512e-01 <list[1]> 2022-07-19 04:42:13        1 #>  53:  0.916869195 8.406491e-01 <list[1]> 2022-07-19 04:42:13        1 #>  54:  0.175485762 3.079525e-02 <list[1]> 2022-07-19 04:42:13        1 #>  55: -0.006639453 4.408234e-05 <list[1]> 2022-07-19 04:42:13        1 #>  56:  0.505511996 2.555424e-01 <list[1]> 2022-07-19 04:42:13        1 #>  57:  0.468442226 2.194381e-01 <list[1]> 2022-07-19 04:42:13        1 #>  58: -0.287588828 8.270733e-02 <list[1]> 2022-07-19 04:42:13        1 #>  59:  0.280285979 7.856023e-02 <list[1]> 2022-07-19 04:42:13        1 #>  60: -0.995511150 9.910424e-01 <list[1]> 2022-07-19 04:42:13        1 #>  61:  0.869052042 7.552515e-01 <list[1]> 2022-07-19 04:42:13        1 #>  62:  0.416638121 1.735873e-01 <list[1]> 2022-07-19 04:42:13        1 #>  63: -0.760327114 5.780973e-01 <list[1]> 2022-07-19 04:42:13        1 #>  64:  0.642995525 4.134432e-01 <list[1]> 2022-07-19 04:42:13        1 #>  65:  0.823360082 6.779218e-01 <list[1]> 2022-07-19 04:42:13        1 #>  66: -0.927947951 8.610874e-01 <list[1]> 2022-07-19 04:42:13        1 #>  67:  0.255284328 6.517009e-02 <list[1]> 2022-07-19 04:42:13        1 #>  68: -0.329239324 1.083985e-01 <list[1]> 2022-07-19 04:42:13        1 #>  69: -0.252555779 6.378442e-02 <list[1]> 2022-07-19 04:42:13        1 #>  70: -0.719616269 5.178476e-01 <list[1]> 2022-07-19 04:42:13        1 #>  71: -0.636613503 4.052768e-01 <list[1]> 2022-07-19 04:42:13        1 #>  72: -0.912846412 8.332886e-01 <list[1]> 2022-07-19 04:42:13        1 #>  73: -0.312764729 9.782178e-02 <list[1]> 2022-07-19 04:42:13        1 #>  74:  0.240695663 5.793440e-02 <list[1]> 2022-07-19 04:42:13        1 #>  75: -0.384550313 1.478789e-01 <list[1]> 2022-07-19 04:42:13        1 #>  76: -0.239573721 5.739557e-02 <list[1]> 2022-07-19 04:42:13        1 #>  77:  0.887401907 7.874821e-01 <list[1]> 2022-07-19 04:42:13        1 #>  78:  0.766031371 5.868041e-01 <list[1]> 2022-07-19 04:42:13        1 #>  79:  0.649633335 4.220235e-01 <list[1]> 2022-07-19 04:42:13        1 #>  80: -0.595948858 3.551550e-01 <list[1]> 2022-07-19 04:42:13        1 #>  81:  0.363663411 1.322511e-01 <list[1]> 2022-07-19 04:42:13        1 #>  82: -0.386242746 1.491835e-01 <list[1]> 2022-07-19 04:42:13        1 #>  83: -0.802866770 6.445951e-01 <list[1]> 2022-07-19 04:42:13        1 #>  84:  0.075020561 5.628085e-03 <list[1]> 2022-07-19 04:42:13        1 #>  85:  0.999139969 9.982807e-01 <list[1]> 2022-07-19 04:42:13        1 #>  86:  0.365012577 1.332342e-01 <list[1]> 2022-07-19 04:42:13        1 #>  87:  0.186611278 3.482377e-02 <list[1]> 2022-07-19 04:42:13        1 #>  88:  0.505285230 2.553132e-01 <list[1]> 2022-07-19 04:42:13        1 #>  89:  0.006453105 4.164256e-05 <list[1]> 2022-07-19 04:42:13        1 #>  90: -0.231708234 5.368871e-02 <list[1]> 2022-07-19 04:42:13        1 #>  91: -0.474053654 2.247269e-01 <list[1]> 2022-07-19 04:42:13        1 #>  92:  0.035767335 1.279302e-03 <list[1]> 2022-07-19 04:42:13        1 #>  93: -0.810962164 6.576596e-01 <list[1]> 2022-07-19 04:42:13        1 #>  94:  0.054813391 3.004508e-03 <list[1]> 2022-07-19 04:42:13        1 #>  95:  0.363783442 1.323384e-01 <list[1]> 2022-07-19 04:42:13        1 #>  96: -0.495668644 2.456874e-01 <list[1]> 2022-07-19 04:42:13        1 #>  97: -0.357197297 1.275899e-01 <list[1]> 2022-07-19 04:42:13        1 #>  98: -0.318812686 1.016415e-01 <list[1]> 2022-07-19 04:42:13        1 #>  99: -0.277983934 7.727507e-02 <list[1]> 2022-07-19 04:42:13        1 #> 100:  0.796990387 6.351937e-01 <list[1]> 2022-07-19 04:42:13        1 #>                 x            y  x_domain           timestamp batch_nr"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"OptimizerGenSA class implements generalized simulated annealing. Calls GenSA::GenSA() package GenSA.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"Tsallis C, Stariolo DA (1996). “Generalized simulated annealing.” Physica : Statistical Mechanics Applications, 233(1-2), 395--406. doi:10.1016/s0378-4371(96)00271-3 . Xiang Y, Gubian S, Suomela B, Hoeng J (2013). “Generalized Simulated Annealing Global Optimization: GenSA Package.” R Journal, 5(1), 13. doi:10.32614/rj-2013-002 .","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"gensa\") opt(\"gensa\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"smooth logical(1) temperature numeric(1) acceptance.param numeric(1) verbose logical(1) trace.mat logical(1) meaning control parameters, see GenSA::GenSA(). Note removed control parameters refer termination algorithm terminators allow obtain behavior.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"bbotk::Optimizer -> OptimizerGenSA","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"OptimizerGenSA$new() OptimizerGenSA$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"","code":"OptimizerGenSA$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"","code":"OptimizerGenSA$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_gensa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Generalized Simulated Annealing — mlr_optimizers_gensa","text":"","code":"if (requireNamespace(\"GenSA\")) {    search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))    codomain = ps(y = p_dbl(tags = \"minimize\"))    objective_function = function(xs) {     list(y = as.numeric(xs)^2)   }    objective = ObjectiveRFun$new(     fun = objective_function,     domain = domain,     codomain = codomain)    instance = OptimInstanceSingleCrit$new(     objective = objective,     search_space = search_space,     terminator = trm(\"evals\", n_evals = 10))    optimizer = opt(\"cmaes\")    # Modifies the instance by reference   optimizer$optimize(instance)    # Returns best scoring evaluation   instance$result    # Allows access of data.table of full path of all evaluations   as.data.table(instance$archive$data) } #> Warning: CMA-ES is typically applied to search space dimensions between three and fifty. A lower search space dimension might crash. #>               x           y  x_domain           timestamp batch_nr #>  1:  0.12421353 0.015429000 <list[1]> 2022-07-19 04:42:13        1 #>  2:  0.79430866 0.630926240 <list[1]> 2022-07-19 04:42:13        2 #>  3: -0.70493614 0.496934967 <list[1]> 2022-07-19 04:42:13        3 #>  4: -0.26446799 0.069943319 <list[1]> 2022-07-19 04:42:13        4 #>  5: -0.23117475 0.053441764 <list[1]> 2022-07-19 04:42:13        5 #>  6: -0.21021986 0.044192390 <list[1]> 2022-07-19 04:42:13        6 #>  7:  0.21249743 0.045155159 <list[1]> 2022-07-19 04:42:13        7 #>  8: -1.00000000 1.000000000 <list[1]> 2022-07-19 04:42:13        8 #>  9:  0.06755193 0.004563264 <list[1]> 2022-07-19 04:42:13        9 #> 10: -0.69407449 0.481739398 <list[1]> 2022-07-19 04:42:13       10"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Grid Search — mlr_optimizers_grid_search","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"OptimizerGridSearch class implements grid search. grid constructed Cartesian product discretized values per parameter, see paradox::generate_design_grid(). points grid evaluated random order. order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. Larger batches mean can parallelize , smaller batches imply fine-grained checking termination criteria.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"grid_search\") opt(\"grid_search\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"resolution integer(1) Resolution grid, see paradox::generate_design_grid(). param_resolutions named integer() Resolution per parameter, named parameter ID, see paradox::generate_design_grid(). batch_size integer(1) Maximum number points try batch.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"bbotk::Optimizer -> OptimizerGridSearch","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"OptimizerGridSearch$new() OptimizerGridSearch$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"","code":"OptimizerGridSearch$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"","code":"OptimizerGridSearch$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_grid_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Grid Search — mlr_optimizers_grid_search","text":"","code":"search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))  codomain = ps(y = p_dbl(tags = \"minimize\"))  objective_function = function(xs) {   list(y = as.numeric(xs)^2) }  objective = ObjectiveRFun$new(  fun = objective_function,  domain = domain,  codomain = codomain)  instance = OptimInstanceSingleCrit$new(  objective = objective,  search_space = search_space,  terminator = trm(\"evals\", n_evals = 10))   optimizer = opt(\"grid_search\")  # modifies the instance by reference optimizer$optimize(instance) #>            x  x_domain          y #> 1: 0.1111111 <list[1]> 0.01234568  # returns best scoring evaluation instance$result #>            x  x_domain          y #> 1: 0.1111111 <list[1]> 0.01234568  # allows access of data.table of full path of all evaluations as.data.table(instance$archive$data) #>              x          y  x_domain           timestamp batch_nr #>  1: -0.5555556 0.30864198 <list[1]> 2022-07-19 04:42:14        1 #>  2:  0.5555556 0.30864198 <list[1]> 2022-07-19 04:42:14        2 #>  3:  0.3333333 0.11111111 <list[1]> 2022-07-19 04:42:14        3 #>  4: -0.3333333 0.11111111 <list[1]> 2022-07-19 04:42:14        4 #>  5:  0.1111111 0.01234568 <list[1]> 2022-07-19 04:42:14        5 #>  6: -0.1111111 0.01234568 <list[1]> 2022-07-19 04:42:14        6 #>  7:  0.7777778 0.60493827 <list[1]> 2022-07-19 04:42:14        7 #>  8: -0.7777778 0.60493827 <list[1]> 2022-07-19 04:42:14        8 #>  9: -1.0000000 1.00000000 <list[1]> 2022-07-19 04:42:14        9 #> 10:  1.0000000 1.00000000 <list[1]> 2022-07-19 04:42:14       10"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Iterated Racing — mlr_optimizers_irace","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"OptimizerIrace class implements iterated racing. Calls irace::irace() package irace.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"Lopez-Ibanez M, Dubois-Lacoste J, Caceres LP, Birattari M, Stuetzle T (2016). “irace package: Iterated racing automatic algorithm configuration.” Operations Research Perspectives, 3, 43--58. doi:10.1016/j.orp.2016.09.002 .","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"instances list() list instances configurations executed . targetRunnerParallel function() function executes objective function specific parameter configuration instance. default function provided, see section \"Target Runner Instances\". meaning parameters, see irace::defaultScenario(). Note removed control parameters refer termination algorithm. Use TerminatorEvals instead. terminators work OptimizerIrace.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"target-runner-and-instances","dir":"Reference","previous_headings":"","what":"Target Runner and Instances","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"irace package uses targetRunner script R function evaluate configuration particular instance. Usually necessary specify targetRunner function using OptimizerIrace. default function used forwards several configurations instances user defined objective function. usually, user defined function xs, xss xdt parameter depending used Objective class. irace, function needs additional instances parameter.","code":"fun = function(xs, instances) {  # function to evaluate configuration in `xs` on instance `instances` }"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"Archive holds following additional columns: \"race\" (integer(1)) Race iteration. \"step\" (integer(1)) Step number race. \"instance\" (integer(1)) Identifies instances across races steps. \"configuration\" (integer(1)) Identifies configurations across races steps.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"result","dir":"Reference","previous_headings":"","what":"Result","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"optimization result (instance$result) best performing elite final race. reported performance average performance estimated used instances.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"irace\") opt(\"irace\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"bbotk::Optimizer -> OptimizerIrace","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"OptimizerIrace$new() OptimizerIrace$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"","code":"OptimizerIrace$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"","code":"OptimizerIrace$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_irace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Iterated Racing — mlr_optimizers_irace","text":"","code":"library(data.table)  search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15) )  codomain = ps(y = p_dbl(tags = \"minimize\"))  # branin function with noise # the noise generates different instances of the branin function # the noise values are passed via the `instances` parameter fun = function(xdt, instances) {   a = 1   b = 5.1 / (4 * (pi^2))   c = 5 / pi   r = 6   s = 10   t = 1 / (8 * pi)    data.table(y = (     a * ((xdt[[\"x2\"]] -       b * (xdt[[\"x1\"]]^2L) +       c * xdt[[\"x1\"]] - r)^2) +       ((s * (1 - t)) * cos(xdt[[\"x1\"]])) +       unlist(instances))) }  objective = ObjectiveRFunDt$new(fun = fun, domain = domain, codomain = codomain)  instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 1000))  # create instances of branin function instances = rnorm(10, mean = 0, sd = 0.1)  # load optimizer irace and set branin instances optimizer = opt(\"irace\", instances = instances)  # modifies the instance by reference optimizer$optimize(instance) #> # 2022-07-19 04:42:16 UTC: Initialization #> # Elitist race #> # Elitist new instances: 1 #> # Elitist limit: 2 #> # nbIterations: 3 #> # minNbSurvival: 3 #> # nbParameters: 2 #> # seed: 1911049001 #> # confidence level: 0.95 #> # budget: 1000 #> # mu: 5 #> # deterministic: FALSE #>  #> # 2022-07-19 04:42:16 UTC: Iteration 1 of 3 #> # experimentsUsedSoFar: 0 #> # remainingBudget: 1000 #> # currentBudget: 333 #> # nbConfigurations: 55 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|          1|         55|         30|   -7.746266464|         55|00:00:00|   NA|  NA|    NA| #> |x|          2|         55|         30|   -7.767187868|        110|00:00:00|+1.00|1.00|0.0000| #> |x|          3|         55|         30|   -7.720065998|        165|00:00:00|+1.00|1.00|0.0000| #> |x|          4|         55|         30|   -7.664214286|        220|00:00:00|+1.00|1.00|0.0000| #> |-|          5|          1|         30|   -7.645040464|        275|00:00:00|   NA|  NA|    NA| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:          30    mean value:    -7.645040464 #> Description of the best-so-far configuration: #>    .ID.     x1    x2 .PARENT. #> 30   30 2.5091 3.145       NA #>  #> # 2022-07-19 04:42:17 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>        x1    x2 #> 30 2.5091 3.145 #> # 2022-07-19 04:42:17 UTC: Iteration 2 of 3 #> # experimentsUsedSoFar: 275 #> # remainingBudget: 725 #> # currentBudget: 362 #> # nbConfigurations: 52 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|          6|         52|         80|   -9.650632364|         52|00:00:00|   NA|  NA|    NA| #> |x|          4|         52|         80|   -9.522328397|        103|00:00:00|+1.00|1.00|0.0000| #> |x|          2|         52|         80|   -9.576710449|        154|00:00:00|+1.00|1.00|0.0000| #> |x|          1|         52|         80|   -9.593440772|        205|00:00:00|+1.00|1.00|0.0000| #> |-|          3|          2|         80|   -9.579390125|        256|00:00:00|+1.00|1.00|0.0000| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:          30    mean value:    -7.663078234 #> Description of the best-so-far configuration: #>    .ID.     x1    x2 .PARENT. #> 30   30 2.5091 3.145       NA #>  #> # 2022-07-19 04:42:18 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>        x1     x2 #> 30 2.5091 3.1450 #> 80 3.0463 2.4995 #> # 2022-07-19 04:42:18 UTC: Iteration 3 of 3 #> # experimentsUsedSoFar: 531 #> # remainingBudget: 469 #> # currentBudget: 469 #> # nbConfigurations: 60 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|          7|         60|        138|   -9.562453612|         60|00:00:00|   NA|  NA|    NA| #> |x|          3|         60|        138|   -9.569682980|        118|00:00:00|+1.00|1.00|0.0000| #> |x|          6|         60|        138|   -9.614574378|        176|00:00:00|+1.00|1.00|0.0000| #> |x|          5|         60|        138|   -9.590789600|        235|00:00:00|+1.00|1.00|0.0000| #> |-|          4|          3|        138|   -9.562181528|        293|00:00:00|+1.00|1.00|0.0000| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:          80    mean value:    -9.553055698 #> Description of the best-so-far configuration: #>    .ID.     x1     x2 .PARENT. #> 80   80 3.0463 2.4995       30 #>  #> # 2022-07-19 04:42:18 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>         x1     x2 #> 80  3.0463 2.4995 #> 30  2.5091 3.1450 #> 138 3.1024 2.3741 #> # 2022-07-19 04:42:19 UTC: Iteration 4 of 4 #> # experimentsUsedSoFar: 824 #> # remainingBudget: 176 #> # currentBudget: 176 #> # nbConfigurations: 21 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|          8|         21|        178|   -9.598996856|         21|00:00:00|   NA|  NA|    NA| #> |x|          7|         21|        178|   -9.583453193|         39|00:00:00|+1.00|1.00|0.0000| #> |x|          3|         21|        178|   -9.583091551|         57|00:00:00|+1.00|1.00|0.0000| #> |x|          5|         21|        178|   -9.568541459|         75|00:00:00|+1.00|1.00|0.0000| #> |-|          4|          4|        178|   -9.545474199|         93|00:00:00|+1.00|1.00|0.0000| #> |!|          1|          4|        178|   -9.571697245|         95|00:00:00|+1.00|1.00|0.0000| #> |-|          6|          3|        178|   -9.591428080|         96|00:00:00|+1.00|1.00|0.0000| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:          80    mean value:    -9.551400751 #> Description of the best-so-far configuration: #>    .ID.     x1     x2 .PARENT. #> 80   80 3.0463 2.4995       30 #>  #> # 2022-07-19 04:42:19 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>         x1     x2 #> 80  3.0463 2.4995 #> 30  2.5091 3.1450 #> 178 3.1277 2.3611 #> # 2022-07-19 04:42:19 UTC: Iteration 5 of 5 #> # experimentsUsedSoFar: 920 #> # remainingBudget: 80 #> # currentBudget: 80 #> # nbConfigurations: 10 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|          9|         10|        183|   -9.630524558|         10|00:00:00|   NA|  NA|    NA| #> |x|          3|         10|        183|   -9.606692809|         17|00:00:00|+1.00|1.00|0.0000| #> |x|          6|         10|        183|   -9.641230502|         24|00:00:00|+1.00|1.00|0.0000| #> |x|          7|         10|        183|   -9.623023458|         31|00:00:00|+1.00|1.00|0.0000| #> |-|          2|          4|        183|   -9.647448381|         39|00:00:00|+1.00|1.00|0.0000| #> |!|          5|          4|        183|   -9.627104314|         40|00:00:00|+1.00|1.00|0.0000| #> |!|          4|          4|        183|   -9.602331977|         41|00:00:00|+1.00|1.00|0.0000| #> |!|          1|          4|        183|   -9.614953638|         42|00:00:00|+1.00|1.00|0.0000| #> |-|          8|          1|        183|   -9.613235417|         43|00:00:00|   NA|  NA|    NA| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:         183    mean value:    -9.613235417 #> Description of the best-so-far configuration: #>     .ID.     x1     x2 .PARENT. #> 183  183 3.1374 2.3558      178 #>  #> # 2022-07-19 04:42:19 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>         x1     x2 #> 183 3.1374 2.3558 #> # 2022-07-19 04:42:19 UTC: Iteration 6 of 6 #> # experimentsUsedSoFar: 963 #> # remainingBudget: 37 #> # currentBudget: 37 #> # nbConfigurations: 4 #> # Markers: #>      x No test is performed. #>      c Configurations are discarded only due to capping. #>      - The test is performed and some configurations are discarded. #>      = The test is performed but no configuration is discarded. #>      ! The test is performed and configurations could be discarded but elite configurations are preserved. #>      . All alive configurations are elite and nothing is discarded #>  #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> | |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> |x|         10|          4|        191|   -9.552930665|          4|00:00:00|   NA|  NA|    NA| #> |x|          8|          4|        191|   -9.576601271|          7|00:00:00|+1.00|1.00|0.0000| #> |x|          6|          4|        191|   -9.621430218|         10|00:00:00|+1.00|1.00|0.0000| #> |x|          7|          4|        191|   -9.608368802|         13|00:00:00|+1.00|1.00|0.0000| #> |-|          1|          2|        191|   -9.627512540|         16|00:00:00|+1.00|1.00|0.0000| #> +-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+ #> Best-so-far configuration:         183    mean value:    -9.607126720 #> Description of the best-so-far configuration: #>     .ID.     x1     x2 .PARENT. #> 183  183 3.1374 2.3558      178 #>  #> # 2022-07-19 04:42:19 UTC: Elite configurations (first number is the configuration ID; listed from best to worst according to the sum of ranks): #>         x1     x2 #> 183 3.1374 2.3558 #> 191 3.1383 2.3501 #> # 2022-07-19 04:42:19 UTC: Stopped because there is not enough budget left to race more than the minimum (3) #> # You may either increase the budget or set 'minNbSurvival' to a lower value #> # Iteration: 7 #> # nbIterations: 7 #> # experimentsUsedSoFar: 979 #> # timeUsed: 0 #> # remainingBudget: 21 #> # currentBudget: 21 #> # number of elites: 2 #> # nbConfigurations: 3 #>        x1     x2 configuration  x_domain         y #> 1: 3.1374 2.3558           183 <list[2]> -9.607127  # best scoring configuration instance$result #>        x1     x2 configuration  x_domain         y #> 1: 3.1374 2.3558           183 <list[2]> -9.607127  # all evaluations as.data.table(instance$archive) #>           x1      x2          y race step instance configuration #>   1:  5.3887  5.1886  22.012748    1    1        5             1 #>   2:  0.7920 11.7742  54.991046    1    1        5             2 #>   3: -2.1638  5.1365  18.655654    1    1        5             3 #>   4:  1.7026 14.3329 112.440972    1    1        5             4 #>   5:  2.2111 10.3773  46.933306    1    1        5             5 #>  ---                                                             #> 975:  3.1383  2.3501  -9.569185    6    1        9           191 #> 976:  3.1437  2.3473  -9.569008    6    1        9           192 #> 977:  3.1207  2.3554  -9.703202    6    1        5           190 #> 978:  3.1383  2.3501  -9.704087    6    1        5           191 #> 979:  3.1437  2.3473  -9.703911    6    1        5           192 #>                timestamp batch_nr #>   1: 2022-07-19 04:42:17        1 #>   2: 2022-07-19 04:42:17        1 #>   3: 2022-07-19 04:42:17        1 #>   4: 2022-07-19 04:42:17        1 #>   5: 2022-07-19 04:42:17        1 #>  ---                              #> 975: 2022-07-19 04:42:19       35 #> 976: 2022-07-19 04:42:19       35 #> 977: 2022-07-19 04:42:19       36 #> 978: 2022-07-19 04:42:19       36 #> 979: 2022-07-19 04:42:19       36"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"OptimizerNLoptr class implements non-linear optimization. Calls nloptr::nloptr() package nloptr.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"Johnson, G S (2020). “NLopt nonlinear-optimization package.” https://github.com/stevengj/nlopt.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"algorithm character(1) eval_g_ineq function() xtol_rel numeric(1) xtol_abs numeric(1) ftol_rel numeric(1) ftol_abs numeric(1) start_values character(1) Create random start values based center search space? latter case, center parameters trafo applied. meaning control parameters, see nloptr::nloptr() nloptr::nloptr.print.options(). termination conditions stopval, maxtime maxeval nloptr::nloptr() deactivated replaced Terminator subclasses. x function value tolerance termination conditions (xtol_rel = 10^-4, xtol_abs = rep(0.0, length(x0)), ftol_rel = 0.0 ftol_abs = 0.0) still available implemented package defaults. deactivate conditions, set -1.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"bbotk::Optimizer -> OptimizerNLoptr","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"OptimizerNLoptr$new() OptimizerNLoptr$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"","code":"OptimizerNLoptr$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"","code":"OptimizerNLoptr$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_nloptr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Non-linear Optimization — mlr_optimizers_nloptr","text":"","code":"# \\donttest{ if (requireNamespace(\"nloptr\")) {    search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))    codomain = ps(y = p_dbl(tags = \"minimize\"))    objective_function = function(xs) {     list(y = as.numeric(xs)^2)   }    objective = ObjectiveRFun$new(     fun = objective_function,     domain = domain,     codomain = codomain)     # We use the internal termination criterion xtol_rel   terminator = trm(\"none\")   instance = OptimInstanceSingleCrit$new(     objective = objective,     search_space = search_space,     terminator = terminator)     optimizer = opt(\"nloptr\", algorithm = \"NLOPT_LN_BOBYQA\")    # Modifies the instance by reference   optimizer$optimize(instance)    # Returns best scoring evaluation   instance$result    # Allows access of data.table of full path of all evaluations   as.data.table(instance$archive) } #>                 x            y           timestamp batch_nr    x_domain_x #>  1:  6.573015e-01 4.320453e-01 2022-07-19 04:42:21        1  6.573015e-01 #>  2:  6.573015e-01 4.320453e-01 2022-07-19 04:42:21        2  6.573015e-01 #>  3:  6.573015e-01 4.320453e-01 2022-07-19 04:42:21        3  6.573015e-01 #>  4:  9.143254e-01 8.359909e-01 2022-07-19 04:42:21        4  9.143254e-01 #>  5:  4.002777e-01 1.602222e-01 2022-07-19 04:42:21        5  4.002777e-01 #>  6:  1.432538e-01 2.052166e-02 2022-07-19 04:42:21        6  1.432538e-01 #>  7: -1.110223e-16 1.232595e-32 2022-07-19 04:42:21        7 -1.110223e-16 #>  8: -2.570238e-02 6.606126e-04 2022-07-19 04:42:21        8 -2.570238e-02 #>  9:  2.570238e-03 6.606126e-06 2022-07-19 04:42:21        9  2.570238e-03 #> 10: -2.570238e-03 6.606126e-06 2022-07-19 04:42:21       10 -2.570238e-03 #> 11:  2.570238e-05 6.606126e-10 2022-07-19 04:42:21       11  2.570238e-05 #> 12: -2.570238e-05 6.606126e-10 2022-07-19 04:42:21       12 -2.570238e-05 #> 13:  2.609778e-22 6.810944e-44 2022-07-19 04:42:21       13  2.609778e-22 # }"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimization via Random Search — mlr_optimizers_random_search","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"OptimizerRandomSearch class implements simple Random Search. order support general termination criteria parallelization, evaluate points batch-fashion size batch_size. Larger batches mean can parallelize , smaller batches imply fine-grained checking termination criteria.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"Bergstra J, Bengio Y (2012). “Random Search Hyper-Parameter Optimization.” Journal Machine Learning Research, 13(10), 281--305. https://jmlr.csail.mit.edu/papers/v13/bergstra12a.html.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"random_search\") opt(\"random_search\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"batch_size integer(1) Maximum number points try batch.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"$optimize() supports progress bars via package progressr combined Terminator. Simply wrap function progressr::with_progress() enable . recommend use package progress backend; enable progressr::handlers(\"progress\").","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"bbotk::Optimizer -> OptimizerRandomSearch","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"bbotk::Optimizer$format() bbotk::Optimizer$help() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"OptimizerRandomSearch$new() OptimizerRandomSearch$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"","code":"OptimizerRandomSearch$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"","code":"OptimizerRandomSearch$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_optimizers_random_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimization via Random Search — mlr_optimizers_random_search","text":"","code":"search_space = domain = ps(x = p_dbl(lower = -1, upper = 1))  codomain = ps(y = p_dbl(tags = \"minimize\"))  objective_function = function(xs) {   list(y = as.numeric(xs)^2) }  objective = ObjectiveRFun$new(  fun = objective_function,  domain = domain,  codomain = codomain)  instance = OptimInstanceSingleCrit$new(  objective = objective,  search_space = search_space,  terminator = trm(\"evals\", n_evals = 10))   optimizer = opt(\"random_search\")  # modifies the instance by reference optimizer$optimize(instance) #>            x  x_domain          y #> 1: 0.1827412 <list[1]> 0.03339434  # returns best scoring evaluation instance$result #>            x  x_domain          y #> 1: 0.1827412 <list[1]> 0.03339434  # allows access of data.table of full path of all evaluations as.data.table(instance$archive$data) #>              x          y  x_domain           timestamp batch_nr #>  1:  0.4058854 0.16474294 <list[1]> 2022-07-19 04:42:21        1 #>  2: -0.9665776 0.93427225 <list[1]> 2022-07-19 04:42:21        2 #>  3: -0.8748834 0.76542103 <list[1]> 2022-07-19 04:42:21        3 #>  4:  0.4436135 0.19679297 <list[1]> 2022-07-19 04:42:21        4 #>  5:  0.1827412 0.03339434 <list[1]> 2022-07-19 04:42:21        5 #>  6: -0.4109460 0.16887661 <list[1]> 2022-07-19 04:42:21        6 #>  7:  0.5508310 0.30341477 <list[1]> 2022-07-19 04:42:21        7 #>  8:  0.9053628 0.81968178 <list[1]> 2022-07-19 04:42:21        8 #>  9:  0.2185706 0.04777311 <list[1]> 2022-07-19 04:42:21        9 #> 10: -0.7061279 0.49861663 <list[1]> 2022-07-19 04:42:21       10"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Terminators — mlr_terminators","title":"Dictionary of Terminators — mlr_terminators","text":"simple mlr3misc::Dictionary storing objects class Terminator. terminator associated help page, see mlr_terminators_[id]. dictionary can get populated additional terminators add-packages. convenient way retrieve construct terminator, see trm()/trms().","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of Terminators — mlr_terminators","text":"R6::R6Class object inheriting mlr3misc::Dictionary.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Dictionary of Terminators — mlr_terminators","text":"See mlr3misc::Dictionary.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Dictionary of Terminators — mlr_terminators","text":".data.table(dict, ..., objects = FALSE)mlr3misc::Dictionary -> data.table::data.table() Returns data.table::data.table() fields \"key\", \"label\", \"properties\" \"unit\" columns. objects set TRUE, constructed objects returned list column named object.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary of Terminators — mlr_terminators","text":"","code":"as.data.table(mlr_terminators) #>                 key                label             properties        unit #> 1:       clock_time           Clock Time single-crit,multi-crit     seconds #> 2:            combo          Combination single-crit,multi-crit     percent #> 3:            evals Number of Evaluation single-crit,multi-crit evaluations #> 4:             none                 None single-crit,multi-crit     percent #> 5:     perf_reached    Performance Level            single-crit     percent #> 6:         run_time             Run Time single-crit,multi-crit     seconds #> 7:       stagnation           Stagnation            single-crit     percent #> 8: stagnation_batch     Stagnation Batch            single-crit     percent mlr_terminators$get(\"evals\") #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=100, k=0 trm(\"evals\", n_evals = 10) #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=10, k=0"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Clock Time Terminator — mlr_terminators_clock_time","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"Class terminate optimization fixed time point reached (reported Sys.time()).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"clock_time\") trm(\"clock_time\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"stop_time POSIXct(1) Terminator stops point time.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"bbotk::Terminator -> TerminatorClockTime","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"TerminatorClockTime$new() TerminatorClockTime$is_terminated() TerminatorClockTime$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"","code":"TerminatorClockTime$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"","code":"TerminatorClockTime$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"","code":"TerminatorClockTime$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_clock_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clock Time Terminator — mlr_terminators_clock_time","text":"","code":"stop_time = as.POSIXct(\"2030-01-01 00:00:00\") trm(\"clock_time\", stop_time = stop_time) #> <TerminatorClockTime>: Clock Time #> * Parameters: stop_time=<POSIXct>"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Terminators — mlr_terminators_combo","title":"Combine Terminators — mlr_terminators_combo","text":"class takes multiple Terminators terminates soon one included terminators positive.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Combine Terminators — mlr_terminators_combo","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"combo\") trm(\"combo\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Combine Terminators — mlr_terminators_combo","text":"logical(1) Terminate iff included terminator positive? (). Default TRUE.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Combine Terminators — mlr_terminators_combo","text":"bbotk::Terminator -> TerminatorCombo","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Combine Terminators — mlr_terminators_combo","text":"terminators (list()) List objects class Terminator.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Combine Terminators — mlr_terminators_combo","text":"bbotk::Terminator$format() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Combine Terminators — mlr_terminators_combo","text":"TerminatorCombo$new() TerminatorCombo$is_terminated() TerminatorCombo$print() TerminatorCombo$remaining_time() TerminatorCombo$status_long() TerminatorCombo$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Combine Terminators — mlr_terminators_combo","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$new(terminators = list(TerminatorNone$new()))"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"terminators (list()) List objects class Terminator.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Combine Terminators — mlr_terminators_combo","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Combine Terminators — mlr_terminators_combo","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Combine Terminators — mlr_terminators_combo","text":"Printer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$print(...)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"... (ignored).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-remaining-time-","dir":"Reference","previous_headings":"","what":"Method remaining_time()","title":"Combine Terminators — mlr_terminators_combo","text":"Returns remaining runtime seconds. = TRUE, remaining runtime determined time-based terminator shortest time remaining. non-time-based terminators used = FALSE, remaining runtime always Inf.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$remaining_time(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Combine Terminators — mlr_terminators_combo","text":"integer(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-status-long-","dir":"Reference","previous_headings":"","what":"Method status_long()","title":"Combine Terminators — mlr_terminators_combo","text":"Returns max_steps current_steps terminator.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$status_long(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Combine Terminators — mlr_terminators_combo","text":"data.table::data.table.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Combine Terminators — mlr_terminators_combo","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"TerminatorCombo$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Terminators — mlr_terminators_combo","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_combo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Terminators — mlr_terminators_combo","text":"","code":"trm(\"combo\",   list(trm(\"clock_time\", stop_time = Sys.time() + 60),     trm(\"evals\", n_evals = 10)), any = FALSE ) #> <TerminatorCombo>: Combination #> * Parameters: any=FALSE #> * Terminators: <TerminatorClockTime>,<TerminatorEvals>"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminator that stops after a number of evaluations — mlr_terminators_evals","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"Class terminate optimization depending number evaluations. evaluation defined one resampling parameter value. total number evaluations \\(B\\) defined $$    B = \\mathrm{n_evals} + k * D $$ \\(D\\) dimension search space.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"evals\") trm(\"evals\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"n_evals integer(1) See formula . Default 100. k integer(1) See formula . Default 0.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"bbotk::Terminator -> TerminatorEvals","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"TerminatorEvals$new() TerminatorEvals$is_terminated() TerminatorEvals$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"","code":"TerminatorEvals$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"","code":"TerminatorEvals$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"","code":"TerminatorEvals$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_evals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminator that stops after a number of evaluations — mlr_terminators_evals","text":"","code":"TerminatorEvals$new() #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=100, k=0  # 5 evaluations in total trm(\"evals\", n_evals = 5) #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=5, k=0  # 3 * [dimension of search space] evaluations in total trm(\"evals\", n_evals = 0, k = 3) #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=0, k=3  # (3 * [dimension of search space] + 1) evaluations in total trm(\"evals\", n_evals = 1, k = 3) #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=1, k=3"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":null,"dir":"Reference","previous_headings":"","what":"None Terminator — mlr_terminators_none","title":"None Terminator — mlr_terminators_none","text":"Mainly useful optimization algorithms stopping inherently controlled algorithm (e.g. OptimizerGridSearch).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"None Terminator — mlr_terminators_none","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"none\") trm(\"none\")"},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"None Terminator — mlr_terminators_none","text":"bbotk::Terminator -> TerminatorNone","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"None Terminator — mlr_terminators_none","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"None Terminator — mlr_terminators_none","text":"TerminatorNone$new() TerminatorNone$is_terminated() TerminatorNone$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"None Terminator — mlr_terminators_none","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"None Terminator — mlr_terminators_none","text":"","code":"TerminatorNone$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"None Terminator — mlr_terminators_none","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"None Terminator — mlr_terminators_none","text":"","code":"TerminatorNone$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"None Terminator — mlr_terminators_none","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"None Terminator — mlr_terminators_none","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"None Terminator — mlr_terminators_none","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"None Terminator — mlr_terminators_none","text":"","code":"TerminatorNone$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_none.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"None Terminator — mlr_terminators_none","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance Level Terminator — mlr_terminators_perf_reached","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"Class terminate optimization performance level hit.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"perf_reached\") trm(\"perf_reached\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"level numeric(1) Performance level needs reached. Default 0. Terminates performance exceeds (respective measure maximized) falls (respective measure minimized) value.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"bbotk::Terminator -> TerminatorPerfReached","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"TerminatorPerfReached$new() TerminatorPerfReached$is_terminated() TerminatorPerfReached$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"","code":"TerminatorPerfReached$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"","code":"TerminatorPerfReached$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"","code":"TerminatorPerfReached$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_perf_reached.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance Level Terminator — mlr_terminators_perf_reached","text":"","code":"TerminatorPerfReached$new() #> <TerminatorPerfReached>: Performance Level #> * Parameters: level=0.1 trm(\"perf_reached\") #> <TerminatorPerfReached>: Performance Level #> * Parameters: level=0.1"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Time Terminator — mlr_terminators_run_time","title":"Run Time Terminator — mlr_terminators_run_time","text":"Class terminate optimization optimization process took number seconds clock.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run Time Terminator — mlr_terminators_run_time","text":"terminator works archive$start_time set. usually done Optimizer.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Run Time Terminator — mlr_terminators_run_time","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"run_time\") trm(\"run_time\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Run Time Terminator — mlr_terminators_run_time","text":"secs numeric(1) Maximum allowed time, seconds, default 100.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Run Time Terminator — mlr_terminators_run_time","text":"bbotk::Terminator -> TerminatorRunTime","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Run Time Terminator — mlr_terminators_run_time","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Run Time Terminator — mlr_terminators_run_time","text":"TerminatorRunTime$new() TerminatorRunTime$is_terminated() TerminatorRunTime$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Run Time Terminator — mlr_terminators_run_time","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Time Terminator — mlr_terminators_run_time","text":"","code":"TerminatorRunTime$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Run Time Terminator — mlr_terminators_run_time","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Time Terminator — mlr_terminators_run_time","text":"","code":"TerminatorRunTime$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Time Terminator — mlr_terminators_run_time","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Run Time Terminator — mlr_terminators_run_time","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Run Time Terminator — mlr_terminators_run_time","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Time Terminator — mlr_terminators_run_time","text":"","code":"TerminatorRunTime$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Time Terminator — mlr_terminators_run_time","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_run_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Time Terminator — mlr_terminators_run_time","text":"","code":"trm(\"run_time\", secs = 1800) #> <TerminatorRunTime>: Run Time #> * Parameters: secs=1800"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"Class terminate optimization performance stagnates, .e. improve threshold last iters iterations.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"stagnation\") trm(\"stagnation\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"iters integer(1) Number iterations evaluate performance improvement , default 10. threshold numeric(1) improvement less threshold, optimization stopped, default 0.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"bbotk::Terminator -> TerminatorStagnation","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"TerminatorStagnation$new() TerminatorStagnation$is_terminated() TerminatorStagnation$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"","code":"TerminatorStagnation$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"","code":"TerminatorStagnation$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"","code":"TerminatorStagnation$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation","text":"","code":"TerminatorStagnation$new() #> <TerminatorStagnation>: Stagnation #> * Parameters: iters=10, threshold=0 trm(\"stagnation\", iters = 5, threshold = 1e-5) #> <TerminatorStagnation>: Stagnation #> * Parameters: iters=5, threshold=1e-05"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"Class terminate optimization performance stagnates, .e. improve threshold last n batches.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"Terminator can instantiated via dictionary mlr_terminators associated sugar function trm():","code":"mlr_terminators$get(\"stagnation_batch\") trm(\"stagnation_batch\")"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"n integer(1) Number batches evaluate performance improvement , default 1. threshold numeric(1) improvement less threshold, optimization stopped, default 0.","code":""},{"path":[]},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"bbotk::Terminator -> TerminatorStagnationBatch","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"bbotk::Terminator$format() bbotk::Terminator$print() bbotk::Terminator$remaining_time() bbotk::Terminator$status()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"TerminatorStagnationBatch$new() TerminatorStagnationBatch$is_terminated() TerminatorStagnationBatch$clone()","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"Creates new instance R6 class.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"","code":"TerminatorStagnationBatch$new()"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"method-is-terminated-","dir":"Reference","previous_headings":"","what":"Method is_terminated()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"TRUE iff termination criterion positive, FALSE otherwise.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"","code":"TerminatorStagnationBatch$is_terminated(archive)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"archive (Archive).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"logical(1).","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"objects class cloneable method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"","code":"TerminatorStagnationBatch$clone(deep = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"deep Whether make deep clone.","code":""},{"path":"https://bbotk.mlr-org.com/reference/mlr_terminators_stagnation_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Terminator that stops when optimization does not improve — mlr_terminators_stagnation_batch","text":"","code":"TerminatorStagnationBatch$new() #> <TerminatorStagnationBatch>: Stagnation Batch #> * Parameters: n=1, threshold=0 trm(\"stagnation_batch\", n = 1, threshold = 1e-5) #> <TerminatorStagnationBatch>: Stagnation Batch #> * Parameters: n=1, threshold=1e-05"},{"path":"https://bbotk.mlr-org.com/reference/nds_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Best points w.r.t. non dominated sorting with hypervolume contribution. — nds_selection","title":"Best points w.r.t. non dominated sorting with hypervolume contribution. — nds_selection","text":"Select best subset points non dominated sorting hypervolume contribution tie breaking. Works arbitrary dimension size two higher.","code":""},{"path":"https://bbotk.mlr-org.com/reference/nds_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best points w.r.t. non dominated sorting with hypervolume contribution. — nds_selection","text":"","code":"nds_selection(points, n_select, ref_point = NULL, minimize = TRUE)"},{"path":"https://bbotk.mlr-org.com/reference/nds_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Best points w.r.t. non dominated sorting with hypervolume contribution. — nds_selection","text":"points (matrix()) Numeric matrix column corresponding point n_select (integer(1L)) Amount points select. ref_point (numeric()) Reference point hypervolume. minimize ('logical()') ranking based minimization? Can specified dimension . Default TRUE dimension.","code":""},{"path":"https://bbotk.mlr-org.com/reference/nds_selection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Best points w.r.t. non dominated sorting with hypervolume contribution. — nds_selection","text":"Vector indices selected points","code":""},{"path":"https://bbotk.mlr-org.com/reference/opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactic Sugar Optimizer Construction — opt","title":"Syntactic Sugar Optimizer Construction — opt","text":"function complements mlr_optimizers functions spirit mlr_sugar mlr3.","code":""},{"path":"https://bbotk.mlr-org.com/reference/opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactic Sugar Optimizer Construction — opt","text":"","code":"opt(.key, ...)  opts(.keys, ...)"},{"path":"https://bbotk.mlr-org.com/reference/opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactic Sugar Optimizer Construction — opt","text":".key (character(1)) Key passed respective dictionary retrieve object. ... (named list()) Named arguments passed constructor, set parameters paradox::ParamSet, set public field. See mlr3misc::dictionary_sugar_get() details. .keys (character()) Keys passed respective dictionary retrieve multiple objects.","code":""},{"path":"https://bbotk.mlr-org.com/reference/opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactic Sugar Optimizer Construction — opt","text":"Optimizer opt(). list Optimizer opts().","code":""},{"path":"https://bbotk.mlr-org.com/reference/opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syntactic Sugar Optimizer Construction — opt","text":"","code":"opt(\"random_search\", batch_size = 10) #> <OptimizerRandomSearch>: Random Search #> * Parameters: batch_size=10 #> * Parameter classes: ParamLgl, ParamInt, ParamDbl, ParamFct #> * Properties: dependencies, single-crit, multi-crit #> * Packages: bbotk"},{"path":"https://bbotk.mlr-org.com/reference/optimize_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default optimization function — optimize_default","title":"Default optimization function — optimize_default","text":"Used internally Optimizer. Brings together private .optimize() method private .assign_result() method.","code":""},{"path":"https://bbotk.mlr-org.com/reference/optimize_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default optimization function — optimize_default","text":"","code":"optimize_default(inst, self, private)"},{"path":"https://bbotk.mlr-org.com/reference/optimize_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default optimization function — optimize_default","text":"inst OptimInstance self Optimizer private (environment())","code":""},{"path":"https://bbotk.mlr-org.com/reference/optimize_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default optimization function — optimize_default","text":"data.table::data.table","code":""},{"path":"https://bbotk.mlr-org.com/reference/search_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Get start values for optimizers — search_start","title":"Get start values for optimizers — search_start","text":"Returns named numeric vector start values optimizers.","code":""},{"path":"https://bbotk.mlr-org.com/reference/search_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get start values for optimizers — search_start","text":"","code":"search_start(search_space, type = \"random\")"},{"path":"https://bbotk.mlr-org.com/reference/search_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get start values for optimizers — search_start","text":"search_space ParamSet. type (character(1))random start values center search space?","code":""},{"path":"https://bbotk.mlr-org.com/reference/search_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get start values for optimizers — search_start","text":"named 'numeric()'","code":""},{"path":"https://bbotk.mlr-org.com/reference/shrink_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Shrink a ParamSet towards a point. — shrink_ps","title":"Shrink a ParamSet towards a point. — shrink_ps","text":"Shrinks paradox::ParamSet towards point. Boundaries numeric values shrinked interval around point half previous length, discrete variables, random (currently chosen) level dropped. Note paradox::ParamLgls value shrinked around set default value instead dropping level. Also, tag shrinked added. paradox::ParamSet trafo, x expected contain transformed values.","code":""},{"path":"https://bbotk.mlr-org.com/reference/shrink_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shrink a ParamSet towards a point. — shrink_ps","text":"","code":"shrink_ps(param_set, x, check.feasible = FALSE)"},{"path":"https://bbotk.mlr-org.com/reference/shrink_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shrink a ParamSet towards a point. — shrink_ps","text":"param_set (paradox::ParamSet) paradox::ParamSet shrinked. x (data.table::data.table)data.table::data.table one row containing point shrink around. check.feasible (logical(1)) feasibility parameters checked? feasibility checked, invalid values present, shrinking done. Must turned case paradox::ParamSet trafo. Default FALSE.","code":""},{"path":"https://bbotk.mlr-org.com/reference/shrink_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shrink a ParamSet towards a point. — shrink_ps","text":"paradox::ParamSet","code":""},{"path":"https://bbotk.mlr-org.com/reference/shrink_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shrink a ParamSet towards a point. — shrink_ps","text":"","code":"library(paradox) library(data.table) param_set = ParamSet$new(list(   ParamDbl$new(\"x1\", lower = 0, upper = 10),   ParamInt$new(\"x2\", lower = -10, upper = 10),   ParamFct$new(\"x3\", levels = c(\"a\", \"b\", \"c\")),   ParamLgl$new(\"x4\")) ) x = data.table(x1 = 5, x2 = 0, x3 = \"b\", x4 = FALSE) shrink_ps(param_set, x = x) #> <ParamSet> #>    id    class lower upper nlevels        default value #> 1: x1 ParamDbl   2.5   7.5     Inf <NoDefault[3]>       #> 2: x2 ParamInt  -5.0   5.0      11 <NoDefault[3]>       #> 3: x3 ParamFct    NA    NA       2 <NoDefault[3]>       #> 4: x4 ParamLgl    NA    NA       2          FALSE"},{"path":"https://bbotk.mlr-org.com/reference/transform_xdt_to_xss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the transformed x-values — transform_xdt_to_xss","title":"Calculates the transformed x-values — transform_xdt_to_xss","text":"Transforms given data.table() list transformed x values. trafo defined just convert data.table() list. Mainly internal usage.","code":""},{"path":"https://bbotk.mlr-org.com/reference/transform_xdt_to_xss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the transformed x-values — transform_xdt_to_xss","text":"","code":"transform_xdt_to_xss(xdt, search_space)"},{"path":"https://bbotk.mlr-org.com/reference/transform_xdt_to_xss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the transformed x-values — transform_xdt_to_xss","text":"xdt (data.table::data.table()) Set untransformed points / points search space. One point per row, e.g. data.table(x1 = c(1, 3), x2 = c(2, 4)). Column names match ids search_space. However, xdt can contain additional columns. search_space (paradox::ParamSet) Specifies search space Optimizer. paradox::ParamSet describes either subset domain Objective describes set parameters together trafo function transforms values search space values domain. Depending context, value defaults domain objective.","code":""},{"path":"https://bbotk.mlr-org.com/reference/transform_xdt_to_xss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the transformed x-values — transform_xdt_to_xss","text":"list().","code":""},{"path":"https://bbotk.mlr-org.com/reference/trm.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactic Sugar Terminator Construction — trm","title":"Syntactic Sugar Terminator Construction — trm","text":"function complements mlr_terminators functions spirit mlr_sugar mlr3.","code":""},{"path":"https://bbotk.mlr-org.com/reference/trm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactic Sugar Terminator Construction — trm","text":"","code":"trm(.key, ...)  trms(.keys, ...)"},{"path":"https://bbotk.mlr-org.com/reference/trm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactic Sugar Terminator Construction — trm","text":".key (character(1)) Key passed respective dictionary retrieve object. ... (named list()) Named arguments passed constructor, set parameters paradox::ParamSet, set public field. See mlr3misc::dictionary_sugar_get() details. .keys (character()) Keys passed respective dictionary retrieve multiple objects.","code":""},{"path":"https://bbotk.mlr-org.com/reference/trm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactic Sugar Terminator Construction — trm","text":"Terminator trm(). list Terminator trms().","code":""},{"path":"https://bbotk.mlr-org.com/reference/trm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syntactic Sugar Terminator Construction — trm","text":"","code":"trm(\"evals\", n_evals = 10) #> <TerminatorEvals>: Number of Evaluation #> * Parameters: n_evals=10, k=0"},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-054","dir":"Changelog","previous_headings":"","what":"bbotk 0.5.4","title":"bbotk 0.5.4","text":"feat: Add OptimizerFocusSearch peforms focusing random search.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-053","dir":"Changelog","previous_headings":"","what":"bbotk 0.5.3","title":"bbotk 0.5.3","text":"CRAN release: 2022-05-04 feat: Optimizer Terminator objects field $id now.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-052","dir":"Changelog","previous_headings":"","what":"bbotk 0.5.2","title":"bbotk 0.5.2","text":"CRAN release: 2022-04-04 refactor: $print() method OptimInstance omits unnecessary columns now. fix: $clear() method OptimInstance raised error. fix: $clear() method Archive missed reset $start_time field. feat: Optimizer Terminator objects optional field $label now. feat: .data.table() functions objects class Dictionary extended additional columns. feat: Add .data.table.DictionaryTerminator() function.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-051","dir":"Changelog","previous_headings":"","what":"bbotk 0.5.1","title":"bbotk 0.5.1","text":"CRAN release: 2022-02-25 fix: return $.status() method TerminatorRunTime TerminatorClockTime consistent unit. return seconds now . fix: number evaluations recorded 0 log messages search space empty. feat: Add .data.table.DictionaryOptimizer() function. feat: New $help() method opens manual page Optimizer.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-050","dir":"Changelog","previous_headings":"","what":"bbotk 0.5.0","title":"bbotk 0.5.0","text":"CRAN release: 2022-01-19 feat: Add $nds_selection() method Archive. feat: New Codomain class allows extra parameters. refactor: Objective values automatically named. now , unnamed returns ObjectiveRFun named. fix: OptimInstance, Archive Objective objects cloned properly. refactor: fields $param_classes, $properties $packages Optimizer objects read-now. feat: branin() function exported now.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-040","dir":"Changelog","previous_headings":"","what":"bbotk 0.4.0","title":"bbotk 0.4.0","text":"CRAN release: 2021-09-13 feat: search space domain can now empty. feat: budget TerminatorEvals can now changed depending dimension search space parameter k. feat: Add bb_optimize() function. feat: Add OptimizerIrace calls irace::irace irace package.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-032","dir":"Changelog","previous_headings":"","what":"bbotk 0.3.2","title":"bbotk 0.3.2","text":"CRAN release: 2021-03-18 refactor: Internal changes.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-031","dir":"Changelog","previous_headings":"","what":"bbotk 0.3.1","title":"bbotk 0.3.1","text":"CRAN release: 2021-03-12 feat: Add $clear() method OptimInstance reset instance. refactor: Prettier $print() methods. feat: Assertions overlapping reserved names domain codomain.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-030","dir":"Changelog","previous_headings":"","what":"bbotk 0.3.0","title":"bbotk 0.3.0","text":"CRAN release: 2021-01-23 feat: check points results can now disables check_values flag OptimInstance, OptimInstanceSingleCrit, OptimInstanceMultiCrit, ObjectiveRFun ObjectiveRFunDt. refactor: data.table within Archive can now accessed $data. refactor: m parameter Archive$best() renamed batch. feat: New ArchiveBest class stores best scoring evaluation instead evaluations refactor: runtime reduced ObjectiveRFunDt used domain without trafo. fix: Add support ParamUty OptimizerDesignPoints. feat: start points OptimizerCmaes OptimizerNloptr can now randomly created center search space. feat: $optimize() method supports progress bars via package progressr.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-022","dir":"Changelog","previous_headings":"","what":"bbotk 0.2.2","title":"bbotk 0.2.2","text":"CRAN release: 2020-10-08 refactor: Remove dependency orphaned package bibtex. feat: Add OptimizerCmaes calls adagio::pureCMAES adagio package.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-021","dir":"Changelog","previous_headings":"","what":"bbotk 0.2.1","title":"bbotk 0.2.1","text":"CRAN release: 2020-09-05 refactor: Compact -memory representation R6 objects save space saving mlr3 objects via saveRDS(), serialize() etc. refactor: Warning error messages upstream package Optimizer installed.","code":""},{"path":"https://bbotk.mlr-org.com/news/index.html","id":"bbotk-02","dir":"Changelog","previous_headings":"","what":"bbotk 0.2","title":"bbotk 0.2","text":"First version Black-Box Optimization Toolkit","code":""}]
